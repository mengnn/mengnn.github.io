<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孟繁胜游 ● 技术博客</title>
  
  <subtitle>前端开发工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mengnn.cn/"/>
  <updated>2023-06-30T03:32:05.586Z</updated>
  <id>https://mengnn.cn/</id>
  
  <author>
    <name>孟繁胜游</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一文搞懂什么是OpenID、UnionID和AppID</title>
    <link href="https://mengnn.cn/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E4%BB%80%E4%B9%88%E6%98%AFOpenID,UnionID%E5%92%8CAppID/"/>
    <id>https://mengnn.cn/一文搞懂什么是OpenID,UnionID和AppID/</id>
    <published>2023-06-30T02:42:08.073Z</published>
    <updated>2023-06-30T03:32:05.586Z</updated>
    
    <content type="html"><![CDATA[<p>微信或许已经是我们生活中不可或缺的一部分，在微信生态的不断壮大下（微信公众号，微信小程序，微信开放平台等），对于开发者来说，挑战也越来越多。而且对于微信开发中的OpenID、UnionID和AppID了解和使用也是非常重要的一个过程。</p><a id="more"></a><p>首先我们先看一下对于<strong>OpenID、UnionID和ApplID</strong>比较官方的解释：</p><p>AppID（应用ID）：AppID 是微信开放平台为每个注册的应用分配的唯一标识符。它是开发者在进行微信开发时所需的重要凭证，用于区分不同的应用和接入权限管理。</p><p>UnionID（统一用户标识）：UnionID 是一个跨应用、跨平台的用户唯一标识符。当用户同意授权后，通过 UnionID，开发者可以获取到用户在同一开放平台下不同应用的用户信息。</p><p>OpenID（用户标识）：OpenID 是用户在某个公众号（订阅号、服务号等）或小程序中的唯一标识符。它是用户和公众号/小程序之间的身份凭证，在开发过程中用于区分不同用户。</p><p>针对于上面三个，我们做一个简单的解释：</p><h3 id="1-OpenID"><a href="#1-OpenID" class="headerlink" title="1.OpenID"></a>1.OpenID</h3><p>用户的的唯一标识。不管是微信公众号，还是小程序。同一个用户，对于不同的公众号和小程序都会生成唯一的一个OpenID。</p><p>比如说你们公司有3个小程序（小程序1，小程序2，小程序3），针对于3个不同的用户A，用户B，用户C来说：</p><blockquote><p>小程序1：微信用户A会生成一个 OpenID_a1   微信用户B会生成一个 OpenID_b1</p><p>小程序2：微信用户A会生成一个 OpenID_a2   微信用户B会生成一个 OpenID_b2</p><p>小程序3：微信用户A会生成一个 OpenID_a3   微信用户B会生成一个 OpenID_b3</p></blockquote><p>也就是说，对于同一个用户，<strong>不同的小程序</strong>会生成<strong>不同的OpenID</strong>；同理，针对于同一个小程序，不同的用户，也会生成<strong>不同的OpenID</strong>。</p><p>当然，微信公众号也是同样的道理。</p><h3 id="2-UnionID"><a href="#2-UnionID" class="headerlink" title="2.UnionID"></a>2.UnionID</h3><p>一个跨应用、跨平台的用户唯一标识符。主要是针对于企业来说的，同一个企业下，不同的应用需要微信授权，这个时候就有可能需要用到UnionID。</p><p>比如说你们公司开发了三款App（App1，App2，App3），现在需要做微信授权登录，这个时候就需要把三个APP绑定到同一个微信开放平台主体下。那么这三个app针对于同一个用户授权登录的情况是会生成唯一的一个UnionID。</p><p>具体是这样的：</p><blockquote><p>App1：微信用户A  会生成OpenID_a1  会生成UnionID_1</p><p>App2：微信用户A  会生成OpenID_a2  会生成UnionID_1</p><p>App3：微信用户A  会生成OpenID_a3  会生成UnionID_1</p></blockquote><p>同一个开放平台下的不同应用，针对于同一个用户，会生成唯一的一个UnionID；也就是说，同一个开放平台下，就算有上百个应用，针对于同一个用户，UnionID都是同一个。</p><h3 id="3-AppID"><a href="#3-AppID" class="headerlink" title="3.AppID"></a>3.AppID</h3><p>AppID跟c端也就是我们用户来说就没有太大关系了，他主要针对于开发者来说。它是应用的唯一标识。</p><p>什么是应用的唯一标识，就是说，每当你注册一个微信公众号或者微信小程序的时候，都会生成一个不同的AppID，相当于我们人类的身份证一样，在这里它就是微信公众号或者小程序的“身份证”。</p><p>当开发者或者运营者操作的时候，可能会用到这个应用的唯一“身份证”。</p><p><strong>需要注意的是：</strong>AppID 是在开放平台创建应用时生成的，而 UnionID 和 OpenID 则是在用户授权登录后由微信服务器返回的标识符。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信或许已经是我们生活中不可或缺的一部分，在微信生态的不断壮大下（微信公众号，微信小程序，微信开放平台等），对于开发者来说，挑战也越来越多。而且对于微信开发中的OpenID、UnionID和AppID了解和使用也是非常重要的一个过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信开发" scheme="https://mengnn.cn/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="小程序" scheme="https://mengnn.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>pandas教程-CSV文件读写操作（3）</title>
    <link href="https://mengnn.cn/pandas%E6%95%99%E7%A8%8B-CSV%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    <id>https://mengnn.cn/pandas教程-CSV文件读写/</id>
    <published>2022-12-18T16:00:00.000Z</published>
    <updated>2023-06-27T02:36:52.694Z</updated>
    
    <content type="html"><![CDATA[<p>在 Pandas 中read_csv() 函数能够自动地将表格数据转换为 DataFrame 对象。</p><p>而其常用方法及参数如：pandas.read_csv(filepath_or_buffer, sep=’,’, delimiter=None, header=’infer’,names=None, index_col=None, usecols=None)</p><a id="more"></a><ul><li>filepath_or_buffer：数据输入的路径，可以是文件路径、可以是URL，也可以是实现read方法的任意对象。这个参数，就是我们输入的第一个参数。</li><li>sep：读取csv文件时指定的分隔符，默认为逗号。注意：”csv文件的分隔符” 和 “我们读取csv文件时指定的分隔符” 一定要一致。delimiter ：分隔符的另一个名字，与 sep 功能相似。</li><li>delim_whitespace ：默认为 False，设置为 True 时，表示分割符为空白字符，可以是空格、”\t”等等。不管分隔符是什么，只要是空白字符，那么可以通过delim_whitespace=True进行读取。</li><li>header：设置导入 DataFrame 的列名称，默认为 “infer”，注意它与下面介绍的 names 参数的微妙关系。</li><li>names：当names没被赋值时，header会变成0，即选取数据文件的第一行作为列名；当 names 被赋值，header 没被赋值时，那么header会变成None。如果都赋值，就会实现两个参数的组合功能。</li><li>index_col：我们在读取文件之后所得到的DataFrame的索引默认是0、1、2……，我们可以通过set_index设定索引，但是也可以在读取的时候就指定某列为索引。</li><li>usecols：如果一个数据集中有很多列，但是我们在读取的时候只想要使用到的列，我们就可以使用这个参数。</li><li>……</li><li>skiprows：表示过滤行，想过滤掉哪些行，就写在一个列表里面传递给skiprows即可。注意的是：这里是先过滤，然后再确定表头</li><li>dtype：在读取数据的时候，设定字段的类型。比如，ID一般是：00001234，如果默认读取的时候，会显示为1234，所以这个时候要把他转为字符串类型，才能正常显示为00001234：</li></ul><h3 id="安装pandas"><a href="#安装pandas" class="headerlink" title="安装pandas"></a>安装pandas</h3><p>在读取excel文件时还需安装依赖库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br><span class="line">pip install xlrd  <span class="comment"># 读取excel</span></span><br><span class="line">pip install xlwt  <span class="comment"># 写入excel</span></span><br></pre></td></tr></table></figure><h3 id="读取一个本地文件"><a href="#读取一个本地文件" class="headerlink" title="读取一个本地文件"></a>读取一个本地文件</h3><p>csv文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID,Name,Age,City,Salary</span><br><span class="line">0,1,ack,28,Beijing,22000</span><br><span class="line">1,2,Lida,32,Shanghai,19000</span><br><span class="line">2,3,John,43,Shenzhen,12000</span><br><span class="line">3,4,Helen,38,Hengshui,3500</span><br></pre></td></tr></table></figure><p>读取csv文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 别名pd</span></span><br><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>)</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   ID   Name  Age      City  Salary</span></span><br><span class="line"><span class="string">0   1   Jack   28   Beijing   22000</span></span><br><span class="line"><span class="string">1   2   Lida   32  Shanghai   19000</span></span><br><span class="line"><span class="string">2   3   John   43  Shenzhen   12000</span></span><br><span class="line"><span class="string">3   4  Helen   38  Hengshui    3500</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>使用header自定义第几行为表头，默认为0即第一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,header=<span class="number">1</span>) <span class="comment"># 表头变成了第二行</span></span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   1   Jack  28   Beijing  22000</span></span><br><span class="line"><span class="string">0  2   Lida  32  Shanghai  19000</span></span><br><span class="line"><span class="string">1  3   John  43  Shenzhen  12000</span></span><br><span class="line"><span class="string">2  4  Helen  38  Hengshui   3500</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>使用names属性，更改表头：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,names=[<span class="string">'编号'</span>,<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'城市'</span>,<span class="string">'工资'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  编号     姓名   年龄        城市      工资</span></span><br><span class="line"><span class="string">0  ID   Name  Age      City  Salary</span></span><br><span class="line"><span class="string">1   1   Jack   28   Beijing   22000</span></span><br><span class="line"><span class="string">2   2   Lida   32  Shanghai   19000</span></span><br><span class="line"><span class="string">3   3   John   43  Shenzhen   12000</span></span><br><span class="line"><span class="string">4   4  Helen   38  Hengshui    3500</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>所以names和header的使用场景：</p><ol><li>csv文件有表头并且是第一行，那么names和header都无需指定;</li><li>csv文件有表头、但表头不是第一行，可能从下面几行开始才是真正的表头和数据，这个时候指定header即可;</li><li>csv文件没有表头，全部是纯数据，那么我们可以通过names手动生成表头;</li><li>csv文件有表头、但是这个表头你不想用，这个时候同时指定names和header。先用header选出表头和数据，然后再用names将表头替换掉，就等价于将数据读取进来之后再对列名进行rename；</li></ol><p>usecols 只显示我们需要的列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,usecols=[<span class="string">'Name'</span>,<span class="string">'Age'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    Name  Age</span></span><br><span class="line"><span class="string">0   Jack   28</span></span><br><span class="line"><span class="string">1   Lida   32</span></span><br><span class="line"><span class="string">2   John   43</span></span><br><span class="line"><span class="string">3  Helen   38</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>skiprows 参数表示跳过指定的行数，直接一个数字表示过滤掉前几行，这个时候表头也会过滤掉；也可以传入列表，表示过滤到某几行，这个时候会排除掉表头后在过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,skiprows=<span class="number">2</span>)</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   2   Lida  32  Shanghai  19000</span></span><br><span class="line"><span class="string">0  3   John  43  Shenzhen  12000</span></span><br><span class="line"><span class="string">1  4  Helen  38  Hengshui   3500</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,skiprows=[<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     ID   Name  Age      City  Salary</span></span><br><span class="line"><span class="string">0   2   Lida   32  Shanghai   19000</span></span><br><span class="line"><span class="string">1   4  Helen   38  Hengshui    3500</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>dtype：在读取数据的时候，设定字段的类型。比如id一般是：00001234，如果默认读取的时候，会显示为1234，所以这个时候要把他转为字符串类型，才能正常显示为00001234：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'data/readCsv.csv'</span>,dtype=&#123;<span class="string">'Salary'</span>:float&#125;) <span class="comment"># 转换工资为浮点数</span></span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   ID   Name  Age      City   Salary</span></span><br><span class="line"><span class="string">0   1   Jack   28   Beijing  22000.0</span></span><br><span class="line"><span class="string">1   2   Lida   32  Shanghai  19000.0</span></span><br><span class="line"><span class="string">2   3   John   43  Shenzhen  12000.0</span></span><br><span class="line"><span class="string">3   4  Helen   38  Hengshui   3500.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="to-csv-保存文件"><a href="#to-csv-保存文件" class="headerlink" title="to_csv()保存文件"></a>to_csv()保存文件</h3><p>Pandas 提供的 to_csv() 函数用于将 DataFrame 转换为 CSV 数据;如果想要把 CSV 数据写入文件，只需向函数传递一个文件对象即可。否则，CSV 数据将以字符串格式返回</p><p>通过to_csv(path_or_buf=None, sep=’,’, na_rep=’’, float_format=None, columns=None, header=True, index=True, index_label=None, mode=’w’, encoding=None, compression=’infer’, quoting=None, quotechar=’”‘, line_terminator=None, chunksize=None, date_format=None, doublequote=True, escapechar=None, decimal=’.’, errors=’strict’)可以把文件保存到本地：</p><p>path_or_buf=None 字符串或文件目录，文件路径或对象，如果未提供，结果将作为字符串返回。如果传递了一个文件对象，应该用换行= ’ ‘，禁用通用换行符。</p><ul><li>sep=’,’ 输出文件的字段分隔符,默认点</li><li>na_rep=’’,缺失数据填充</li><li>float_format=None，小数点保留几位</li><li>columns=None, 要写入的字段</li><li>header=True，列名的别名</li><li>index=True,写行名(索引)</li><li>index_label=None，索引列的列标签。如果没有给出，并且header和index为True，则使用索引名。如果对象使用多索引，应该给出一个序列。如果不打印索引名称的字段。使用index _ label = Falser以便在R中更容易导入</li><li>mode=‘w’ 写入模式，默认为w</li><li>encoding=None , 表示输出文件中使用的编码的字符串，默认为“utf-8”</li><li>compression=‘infer’ 如果是字符串，表示压缩模式。如果为dict，则’ method ‘处的值是压缩模式。压缩模式可以是以下任何可能的值:{ ’ infer ‘，’ gzip ‘，’ bz2 ‘，’ zip ‘，’ xz ‘，’ None}。如果压缩模式是“推断”和path_or_buf类似于路径，则从以下扩展中检测压缩模式:“”。gz ‘，. bz2 ‘，’。zip’ or ‘。xz’。(否则不压缩)。如果给定的dict和模式是{‘zip ‘，’ gzip ‘，’ bz2’}之一，或根据上述推断，则其他条目作为附加压缩选项传递</li><li>quoting=None, 默认为to csv.QUOTE_MINIMAL。如果你设置了一个浮点格式(_ f)然后浮点被转换成字符串，从而转换成csv.QUOTE_MINIMALl将会将它们视为非数字</li><li>quotechar=’’用于引用字段的字符</li><li>line_terminator=None 输出文件中使用的换行符或字符序列。默认为os.linesep，这取决于调用此方法的操作系统(例如，对于linux为“n”，对于Windows为“rn”)</li><li>chunksize=None 一次写入行</li><li>date_format=None , 日期时间对象的格式字符串</li><li>doublequote=True, 引用路径在双引号内</li><li>escapechar=None, 用于转义的字符</li><li>decimal=’.’, 识别为十进制分隔符的字符</li><li>errors=‘strict’ 指定如何处理编码和解码错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'tow'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=data)</span><br><span class="line">save_info = df.to_csv()</span><br><span class="line">print(save_info)</span><br><span class="line"><span class="comment"># csv数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">,one,tow,three</span></span><br><span class="line"><span class="string">0,1,4,7</span></span><br><span class="line"><span class="string">1,2,5,8</span></span><br><span class="line"><span class="string">2,3,6,9</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 保存文件到本地 默认生成的本地文件带索引</span></span><br><span class="line">df.to_csv(<span class="string">'data/save_csv.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sep 指定CSV 文件输出时的分隔符，并保存</span></span><br><span class="line"><span class="comment"># df.to_csv('data/save_csv2.csv',sep='|')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># float_format 小数点保留几位</span></span><br><span class="line"><span class="comment"># df.to_csv('data/save_csv3.csv',float_format=2)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Pandas 中read_csv() 函数能够自动地将表格数据转换为 DataFrame 对象。&lt;/p&gt;
&lt;p&gt;而其常用方法及参数如：pandas.read_csv(filepath_or_buffer, sep=’,’, delimiter=None, header=’infer’,names=None, index_col=None, usecols=None)&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="pandas" scheme="https://mengnn.cn/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas教程-DataFram对象（2）</title>
    <link href="https://mengnn.cn/pandas%E6%95%99%E7%A8%8B-DataFram/"/>
    <id>https://mengnn.cn/pandas教程-DataFram/</id>
    <published>2022-12-14T16:00:00.000Z</published>
    <updated>2023-06-27T02:37:12.569Z</updated>
    
    <content type="html"><![CDATA[<p>DataFram：DataFram对象类似于二维表，由行和列组成。与Series一样支持多种数据类型。一个表格型的数据结构，包含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔型等)，DataFrame即有行索引也有列索引，可以被看做是由Series组成的字典。</p><a id="more"></a><h3 id="安装pandas"><a href="#安装pandas" class="headerlink" title="安装pandas"></a>安装pandas</h3><p>在读取excel文件时还需安装依赖库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br><span class="line">pip install xlrd  <span class="comment"># 读取excel</span></span><br><span class="line">pip install xlwt  <span class="comment"># 写入excel</span></span><br></pre></td></tr></table></figure><h3 id="引入并创建对象"><a href="#引入并创建对象" class="headerlink" title="引入并创建对象"></a>引入并创建对象</h3><p>创建DataFram对象：pd.DataFram(data,index,columns,dtype,copy)</p><ul><li>data:输入的数据，可以是 ndarray，series，list，dict，标量以及一个 DataFrame。</li><li>index:行索引,如果没有传递 index 值，则默认行标签是 np.arange(n)，n 代表 data 的元素个数。 默认从0开始</li><li>columns:列索引,如果没有传递 columns 值，则默认列标签是 np.arange(n)</li><li>dtype:每一列的数据类型</li><li>copy:默认为 False，表示复制数据 data。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 别名pd</span></span><br><span class="line"><span class="comment"># 列表方式创建DataFram对象</span></span><br><span class="line">data = [[<span class="string">'Mate50pro'</span>,<span class="number">8999.99</span>,<span class="number">100</span>],[<span class="string">'无线鼠标'</span>,<span class="number">205.6</span>,<span class="number">500</span>],[<span class="string">'充电宝'</span>,<span class="number">88.8</span>,<span class="number">1001</span>]]</span><br><span class="line"><span class="comment"># 创建列索引</span></span><br><span class="line">columns = [<span class="string">'名称'</span>,<span class="string">'价格'</span>,<span class="string">'数量'</span>]</span><br><span class="line">df = pd.DataFrame(data=data,columns=columns)</span><br><span class="line">print(df)</span><br><span class="line">print(type(df))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">         名称       价格    数量</span></span><br><span class="line"><span class="string">0  Mate50pro  8999.99   100</span></span><br><span class="line"><span class="string">1       无线鼠标   205.60   500</span></span><br><span class="line"><span class="string">2        充电宝    88.80  1001</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;class 'pandas.core.frame.DataFrame'&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 字典方式创建DataFram对象</span></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">'名称'</span>:[<span class="string">'Mate50pro'</span>,<span class="string">'无线鼠标'</span>,<span class="string">'充电宝'</span>],</span><br><span class="line">    <span class="string">'价格'</span>:[<span class="number">8999.99</span>,<span class="number">205.6</span>,<span class="number">88.8</span>],</span><br><span class="line">    <span class="string">'数量'</span>:[<span class="number">100</span>,<span class="number">500</span>,<span class="number">1001</span>]</span><br><span class="line">&#125;</span><br><span class="line">df2 = pd.DataFrame(data=data2)</span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表嵌套字典创建DataFram对象</span></span><br><span class="line">data3 = [</span><br><span class="line">    &#123;<span class="string">'名称'</span>:<span class="string">'Mate50pro'</span>,<span class="string">'价格'</span>:<span class="number">8999</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'名称'</span>:<span class="string">'无线鼠标'</span>,<span class="string">'价格'</span>:<span class="number">205</span>,<span class="string">'数量'</span>:<span class="number">500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'名称'</span>:<span class="string">'充电宝'</span>,<span class="string">'价格'</span>:<span class="number">88.8</span>,<span class="string">'数量'</span>:<span class="number">1001</span>&#125;</span><br><span class="line">]</span><br><span class="line">df3 = pd.DataFrame(data=data3)</span><br><span class="line">print(df3)</span><br><span class="line"><span class="comment"># 如果其中某个元素值缺失，也就是字典的 key 无法找到对应的 value，将使用 NaN 代替</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">          名称      价格      数量</span></span><br><span class="line"><span class="string">0  Mate50pro  8999.0     NaN</span></span><br><span class="line"><span class="string">1       无线鼠标   205.0   500.0</span></span><br><span class="line"><span class="string">2        充电宝    88.8  1001.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Series创建DataFram</span></span><br><span class="line">data4 = &#123;<span class="string">'one'</span>:pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]),<span class="string">'two'</span>:pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])&#125;</span><br><span class="line">df4 = pd.DataFrame(data=data4)</span><br><span class="line">print(df4)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two</span></span><br><span class="line"><span class="string">a  1.0    1</span></span><br><span class="line"><span class="string">b  2.0    2</span></span><br><span class="line"><span class="string">c  3.0    3</span></span><br><span class="line"><span class="string">d  NaN    4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>手动修改索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动修改索引</span></span><br><span class="line">s = pd.Series(data=data,index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1    张三</span></span><br><span class="line"><span class="string">2    李四</span></span><br><span class="line"><span class="string">3    王二</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="列索引操作"><a href="#列索引操作" class="headerlink" title="列索引操作"></a>列索引操作</h3><p>DataFrame 可以使用列索（columns index）引来完成数据的选取、添加和删除操作。</p><h4 id="列索引选取数据列"><a href="#列索引选取数据列" class="headerlink" title="列索引选取数据列"></a>列索引选取数据列</h4><p>通过访问列名的方式来获取列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=cd,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(df[<span class="string">'one'</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a    1</span></span><br><span class="line"><span class="string">b    2</span></span><br><span class="line"><span class="string">c    3</span></span><br><span class="line"><span class="string">Name: one, dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="列索引添加数、合并据列"><a href="#列索引添加数、合并据列" class="headerlink" title="列索引添加数、合并据列"></a>列索引添加数、合并据列</h4><p>使用 columns 列索引表标签可以实现添加新的数据列# 使用df[‘列’]=值，插入新的数据列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cd = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=cd,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">df[<span class="string">'three'</span>] = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">a    1    4      7</span></span><br><span class="line"><span class="string">b    2    5      8</span></span><br><span class="line"><span class="string">c    3    6      9</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 将已经存在的数据进行相加</span></span><br><span class="line">df[<span class="string">'four'</span>] = df[<span class="string">'one'</span>]+df[<span class="string">'three'</span>]</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three  four</span></span><br><span class="line"><span class="string">a    1    4      7     8</span></span><br><span class="line"><span class="string">b    2    5      8    10</span></span><br><span class="line"><span class="string">c    3    6      9    12</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 同时也可以使用insert()方法插入一列</span></span><br><span class="line"><span class="comment"># 数值1代表插入到columns列表的索引位置,column表示列名，value要写入的数据</span></span><br><span class="line">df.insert(<span class="number">1</span>,column=<span class="string">'five'</span>,value=[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  five  two  three  four</span></span><br><span class="line"><span class="string">a    1    10    4      7     8</span></span><br><span class="line"><span class="string">b    2    11    5      8    10</span></span><br><span class="line"><span class="string">c    3    12    6      9    12</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="列索引删除操作"><a href="#列索引删除操作" class="headerlink" title="列索引删除操作"></a>列索引删除操作</h4><p>通过del和pop()都可以进行DataFram中的列删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]，<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=cd,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'one'</span>]</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  two  three </span></span><br><span class="line"><span class="string">a  4      7 </span></span><br><span class="line"><span class="string">b  5      8 </span></span><br><span class="line"><span class="string">c  6      9 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">df.pop(<span class="string">'two'</span>)</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    three </span></span><br><span class="line"><span class="string">a     7 </span></span><br><span class="line"><span class="string">b     8 </span></span><br><span class="line"><span class="string">c     9 </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="行索引操作"><a href="#行索引操作" class="headerlink" title="行索引操作"></a>行索引操作</h3><h4 id="loc函数"><a href="#loc函数" class="headerlink" title="loc函数"></a>loc函数</h4><p>通过loc[]函数获取对应行数据。只能使用标签索引，不能使用整数索引。当通过标签索引的切片方式来筛选数据时，它的取值前闭后闭，也就是只包括边界值标签（开始和结束）,loc[] 接受两个参数，并以’,’分隔。第一个位置表示行，第二个位置表示列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(df.loc[<span class="string">'a'</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">one      1</span></span><br><span class="line"><span class="string">two      4</span></span><br><span class="line"><span class="string">three    7</span></span><br><span class="line"><span class="string">Name: a, dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 表示a行three列的数据</span></span><br><span class="line">print(df.loc[<span class="string">'a'</span>,<span class="string">'three'</span>]) <span class="comment"># 1</span></span><br><span class="line">print(df.loc[<span class="string">'a'</span>:<span class="string">'b'</span>,:]) <span class="comment"># 等同于df.loc['a':'b']</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">a    1    4      7</span></span><br><span class="line"><span class="string">b    2    5      8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="iloc函数"><a href="#iloc函数" class="headerlink" title="iloc函数"></a>iloc函数</h4><p>iloc[]函数只能使用整数索引，不能使用标签索引，通过整数索引切片选择数据时，前闭后开(不包含边界结束值)。同 Python 和 NumPy 一样，它们的索引都是从 0 开始。</p><p>iloc[] 提供了以下方式来选择数据：</p><ul><li>整数索引</li><li>整数列表</li><li>数值范围</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过整数索引获取，默认从0开始</span></span><br><span class="line">print(df.iloc[<span class="number">2</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">one      3</span></span><br><span class="line"><span class="string">two      6</span></span><br><span class="line"><span class="string">three    9</span></span><br><span class="line"><span class="string">Name: c, dtype: int64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 左闭右开,下面表示打印第2行</span></span><br><span class="line">print(df.iloc[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 打印从第2行开始往后的数据</span></span><br><span class="line">print(df.iloc[<span class="number">1</span>:,])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">b    2    5      8</span></span><br><span class="line"><span class="string">c    3    6      9</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h4><p>使用 concat() 函数，可以将新的数据行添加到 DataFrame 中，该函数会在行末追加数据行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">data2 = &#123;<span class="string">'one'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'two'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],<span class="string">'three'</span>:[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;</span><br><span class="line">df1 = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">df2 = pd.DataFrame(data=data2,index=[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>])</span><br><span class="line">df1 = pd.concat([df1,df2])</span><br><span class="line">print(df1)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">a    1    4      7</span></span><br><span class="line"><span class="string">b    2    5      8</span></span><br><span class="line"><span class="string">c    3    6      9</span></span><br><span class="line"><span class="string">d    4    7     10</span></span><br><span class="line"><span class="string">e    5    8     11</span></span><br><span class="line"><span class="string">f    6    9     12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><p>drop(labels, axis=0, level=None, inplace=False, errors=’raise’)方法。其中labels表示要删除的行或列的标签，无默认值，axis表示要删除行还是列，0表示行，1表示列，默认为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">data2 = &#123;<span class="string">'one'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'two'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],<span class="string">'three'</span>:[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;</span><br><span class="line">df1 = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">df2 = pd.DataFrame(data=data2,index=[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>])</span><br><span class="line">df1 = pd.concat([df1,df2])</span><br><span class="line"><span class="comment"># 删除第a行，如果有相同的行标签，则同时删除</span></span><br><span class="line">df1 = df1.drop(<span class="string">'a'</span>)</span><br><span class="line">print(df1)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">b    2    5      8</span></span><br><span class="line"><span class="string">c    3    6      9</span></span><br><span class="line"><span class="string">d    4    7     10</span></span><br><span class="line"><span class="string">e    5    8     11</span></span><br><span class="line"><span class="string">f    6    9     12</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="### 常用属性和方法"></a>### 常用属性和方法</h4><p>DataFrame 的属性和方法，与 Series 相差无几，相同的可以看上一篇。重点讲一下T和shift()方法。</p><ul><li>T ：行和列转置。</li><li>axes：返回一个仅以行轴标签和列轴标签为成员的列表。</li><li>dtypes ：返回每列数据的数据类型。</li><li>empty ：DataFrame中没有数据或者任意坐标轴的长度为0，则返回True。</li><li>ndim ：轴的数量，也指数组的维数。</li><li>shape ：返回一个元组，表示了 DataFrame 维度。</li><li>size：DataFrame中的元素数量。</li><li>values ：使用 numpy 数组表示 DataFrame 中的元素值。</li><li>head() ：返回前 n 行数据。</li><li>tail()：返回后 n 行数据。</li><li>shift() ：将行或列移动指定的步幅长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># T行和列转置</span></span><br><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">print(df.T)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">       a  b  c</span></span><br><span class="line"><span class="string">one    1  2  3</span></span><br><span class="line"><span class="string">two    4  5  6</span></span><br><span class="line"><span class="string">three  7  8  9</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shift(periods=1, freq=None, axis=0,fill_value)移动行或列</span></span><br><span class="line"><span class="comment"># peroids类型为int，表示移动的幅度，可以是正数，也可以是负数，默认值为1。</span></span><br><span class="line"><span class="comment"># freq日期偏移量，默认值为None，适用于时间序。取值为符合时间规则的字符串。</span></span><br><span class="line"><span class="comment"># axis如果是 0 或者 "index" 表示上下移动，如果是 1 或者 "columns" 则会左右移动。</span></span><br><span class="line"><span class="comment"># fill_value该参数用来填充缺失值。</span></span><br><span class="line">data = &#123;<span class="string">'one'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'two'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'three'</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data=data,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(df.shift(periods=<span class="number">2</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  one  two  three</span></span><br><span class="line"><span class="string">a  NaN  NaN    NaN</span></span><br><span class="line"><span class="string">b  NaN  NaN    NaN</span></span><br><span class="line"><span class="string">c  1.0  4.0    7.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 左右移动</span></span><br><span class="line">print(df.shift(periods=<span class="number">2</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">a  NaN  NaN      1</span></span><br><span class="line"><span class="string">b  NaN  NaN      2</span></span><br><span class="line"><span class="string">c  NaN  NaN      3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(df.shift(periods=<span class="number">2</span>,fill_value=<span class="string">'10'</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  one two three</span></span><br><span class="line"><span class="string">a  10  10    10</span></span><br><span class="line"><span class="string">b  10  10    10</span></span><br><span class="line"><span class="string">c   1   4     7</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DataFram：DataFram对象类似于二维表，由行和列组成。与Series一样支持多种数据类型。一个表格型的数据结构，包含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔型等)，DataFrame即有行索引也有列索引，可以被看做是由Series组成的字典。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="pandas" scheme="https://mengnn.cn/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>照顾好自己，就是对这个社会最大的贡献</title>
    <link href="https://mengnn.cn/%E8%AF%B7%E7%85%A7%E9%A1%BE%E5%A5%BD%E8%87%AA%E5%B7%B1/"/>
    <id>https://mengnn.cn/请照顾好自己/</id>
    <published>2022-12-12T16:00:00.000Z</published>
    <updated>2023-06-27T02:17:39.947Z</updated>
    
    <content type="html"><![CDATA[<p>后疫情时代，或者说半后疫情时代，保护好自己就是对社会最大的贡献，也是对家人最直接的爱。</p><p>当国家逐渐放开，当各个城市陆续发布不再强制要求核酸检测，不再查看健康码等政策后，我们真的“自由”了吗？我们真的能“随心所欲”了吗？<a id="more"></a>至少目前来看，不是的。我们似乎变得更加谨慎，我们甚至变得更担心害怕了。之前有国家这个坚强的后盾为我们撑腰，有城市，有街道，有居委会，有大白们为我们层层把关。而现在，三年中我们每天都在期盼的“放开”，终于来了，就那么突然的到来，只不过，也意味我们要为自己负责，也只能为自己负责。</p><p>也许我们担心的不是我们自己，毕竟我们是一个成年人，我们应该担负起一个成年人的重任。我们担心更多的是我们的孩子，我们身边的老人。对于我们一个成年人来说，也许抗一抗，病毒就走散了，但你想过一个不满三周岁的小朋友吗？他的抵抗力有多强呢？甚至刚出生不到一年的婴幼儿，他们呢？又或者你家中有年迈六七旬的老人吗？甚至耄耋老人？又称想过他们吗？</p><p>我们需要工作，我们需要生活，我们需要接触各种各样的人。那就避免不了接触病毒，避免不了被感染的风险。也许有一天它就会像感冒一样对人的影响微乎其微。但至少现在，还没有到达这个程度，那它对我们就有一定的影响，一定的危害。那为什么不害怕呢？不喜欢说什么危言耸听的话，它是真真实实存在的，目前的现状。</p><p>而我们需要做的也很简单，就是照顾好自己。保护好自己，不让自己被感染，为社会减少一个感染源，减少一个病毒存在的风险。保护好自己，也就是保护好了自己的家人。</p><p>当我们逐渐意识到戴口罩的重要性，当我们开始每天勤洗手，当我们出入公司、家门开始消毒，当我们减少了去一些大澡堂等人口聚集场所的频率……愿世界疫情早日消散，世界处处充满爱，保护好你我，就是对世界最大的爱，对社会最大的贡献。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后疫情时代，或者说半后疫情时代，保护好自己就是对社会最大的贡献，也是对家人最直接的爱。&lt;/p&gt;
&lt;p&gt;当国家逐渐放开，当各个城市陆续发布不再强制要求核酸检测，不再查看健康码等政策后，我们真的“自由”了吗？我们真的能“随心所欲”了吗？
    
    </summary>
    
    
      <category term="随笔" scheme="https://mengnn.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="生活" scheme="https://mengnn.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>pandas教程-Series对象（1）</title>
    <link href="https://mengnn.cn/pandas%E6%95%99%E7%A8%8B-Series/"/>
    <id>https://mengnn.cn/pandas教程-Series/</id>
    <published>2022-12-10T16:00:00.000Z</published>
    <updated>2023-06-27T02:37:32.283Z</updated>
    
    <content type="html"><![CDATA[<p>享有数据分析“三剑客之一”盛名的Pandas，主要包含Series和DataFram两种数据对象。它是一个开源的第三方 Python 库，从 Numpy 和 Matplotlib 的基础上构建而来。Pandas 已经成为 Python 数据分析的必备高级工具，它的目标是成为强大、灵活、可以支持任何编程语言的数据分析工具。</p><p>Series：一种类似于一维数组的对象，是由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series对象可以存储整数、浮点数、字符串、python对象等多种数据类型的数据。仅由一组数据也可产生简单的Series对象。注意：Series中的索引值是可以重复的。</p><a id="more"></a><h3 id="安装pandas"><a href="#安装pandas" class="headerlink" title="安装pandas"></a>安装pandas</h3><p>在读取excel文件时还需安装依赖库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br><span class="line">pip install xlrd  <span class="comment"># 读取excel</span></span><br><span class="line">pip install xlwt  <span class="comment"># 写入excel</span></span><br></pre></td></tr></table></figure><h3 id="引入并创建对象"><a href="#引入并创建对象" class="headerlink" title="引入并创建对象"></a>引入并创建对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 别名pd</span></span><br><span class="line"><span class="comment"># 创建Series对象  pd.Series(data,index=index)，其中data为数据，index为索引值（可省略）默认从0开始，也可以自定义</span></span><br><span class="line">data = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data)</span><br><span class="line">print(s)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0    张三</span></span><br><span class="line"><span class="string">1    李四</span></span><br><span class="line"><span class="string">2    王二</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(type(s))</span><br><span class="line"><span class="comment"># &lt;class 'pandas.core.series.Series'&gt;</span></span><br></pre></td></tr></table></figure><p>手动修改索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动修改索引</span></span><br><span class="line">s = pd.Series(data=data,index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1    张三</span></span><br><span class="line"><span class="string">2    李四</span></span><br><span class="line"><span class="string">3    王二</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>自定义索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义非数字索引</span></span><br><span class="line">data = [<span class="string">'70'</span>,<span class="string">'80'</span>,<span class="string">'90'</span>]</span><br><span class="line">index = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data,index=index)</span><br><span class="line">print(s)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">张三    70</span></span><br><span class="line"><span class="string">李四    80</span></span><br><span class="line"><span class="string">王二    90</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><p>可通过位置索引、标签索引、切片索引对数据进行自定义获取。</p><p>位置索引：s[索引值]，其中索引值的范围为0-N-1</p><p>标签索引：s[索引名称]，获取多个索引值可以通过[[索引名1,索引名2,索引名3…]]的方式获取</p><p>切片索引：s[start:stop:step]，即开始位置:结束位置:步长。其中位置索引进行切片时，含头不含尾，标签索引切片时含头含尾。</p><p>位置索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置索引</span></span><br><span class="line">data = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data)</span><br><span class="line">print(s[<span class="number">0</span>]) <span class="comment"># 张三</span></span><br><span class="line">print(s[<span class="number">1</span>]) <span class="comment"># 李四</span></span><br></pre></td></tr></table></figure><p>标签索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标签索引</span></span><br><span class="line">data = [<span class="string">'70'</span>,<span class="string">'80'</span>,<span class="string">'90'</span>]</span><br><span class="line">index = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data,index=index)</span><br><span class="line">print(s[<span class="string">'张三'</span>]) <span class="comment"># 70</span></span><br><span class="line"><span class="comment"># 获取多个数据</span></span><br><span class="line">print(s[[<span class="string">'张三'</span>,<span class="string">'王二'</span>]])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">张三    70</span></span><br><span class="line"><span class="string">王二    90</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>切片索引:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切片索引</span></span><br><span class="line">data = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data)</span><br><span class="line">print(s[<span class="number">1</span>:<span class="number">2</span>:<span class="number">1</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1    李四</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 也可以省略start值，表示获取前几个值</span></span><br><span class="line">print(s[:<span class="number">2</span>]) <span class="comment"># 表示打印前两个值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1    张三</span></span><br><span class="line"><span class="string">2    李四</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 或者start为赋值时，表示打印后几个</span></span><br><span class="line">print(s[<span class="number">-2</span>:]) <span class="comment"># 表示打印后两个值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2    李四</span></span><br><span class="line"><span class="string">3    王二</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><h4 id="获取Series值和索引"><a href="#获取Series值和索引" class="headerlink" title="获取Series值和索引"></a>获取Series值和索引</h4><p>通过s.index和s.values的方式获取索引值和数据值。其中获取的值为numpy的ndarray类型，不是列表类型。获取的索引可以转换成列表。</p><p>获取索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data)</span><br><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line">print(s.index) <span class="comment"># RangeIndex(start=0, stop=3, step=1)</span></span><br><span class="line">print(type(s.index)) <span class="comment"># &lt;class 'pandas.core.indexes.range.RangeIndex'&gt;</span></span><br><span class="line">print(list(s.index)) <span class="comment"># 转换为列表 [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>获取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取值</span></span><br><span class="line">data = [<span class="string">'70'</span>,<span class="string">'80'</span>,<span class="string">'90'</span>]</span><br><span class="line">index = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data,index=index)</span><br><span class="line"></span><br><span class="line">print(s.values) <span class="comment"># ['70' '80' '90'] 不是数组</span></span><br><span class="line">print(type(s.values)) <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="size，axes，dtype，empty，ndim"><a href="#size，axes，dtype，empty，ndim" class="headerlink" title="size，axes，dtype，empty，ndim"></a>size，axes，dtype，empty，ndim</h4><ul><li>size：返回输入数据的元素数量。</li><li>axes：以列表的形式返回所有行索引标签。</li><li>dtype：返回对象的数据类型。</li><li>empty：返回一个空的 Series 对象。</li><li>ndim：返回输入数据的维数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data)</span><br><span class="line"><span class="comment"># size 返回 Series 对象的大小(长度)。</span></span><br><span class="line">print(s.size) <span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 以列表的形式返回所有行索引标签</span></span><br><span class="line">print(s.axes) <span class="comment"># [RangeIndex(start=0, stop=3, step=1)]</span></span><br><span class="line"><span class="comment"># dtype返回对象的数据类型</span></span><br><span class="line">print(s.dtype) <span class="comment"># object</span></span><br><span class="line"><span class="comment"># empty返回一个布尔值，用于判断数据对象是否为空</span></span><br><span class="line">print(s.empty) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># ndim查看序列的维数。根据定义，Series 是一维数据结构，因此它始终返回 1</span></span><br><span class="line">print(s.ndim) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h4 id="head-和tail方法"><a href="#head-和tail方法" class="headerlink" title="head()和tail方法"></a>head()和tail方法</h4><ul><li>head(n):返回前n行数据，默认显示前5行数据</li><li>tail(n):返回后n行数据，默认显示后5行数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">'70'</span>,<span class="string">'80'</span>,<span class="string">'90'</span>]</span><br><span class="line">index = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王二'</span>]</span><br><span class="line">s = pd.Series(data=data,index=index)</span><br><span class="line">print(s.head(<span class="number">2</span>)) <span class="comment"># 打印前两条数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">张三    70</span></span><br><span class="line"><span class="string">李四    80</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(s.tail(<span class="number">2</span>))<span class="comment"># 打印后两条数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">李四    80</span></span><br><span class="line"><span class="string">王二    90</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="检测-Series-中的缺失值"><a href="#检测-Series-中的缺失值" class="headerlink" title="检测 Series 中的缺失值"></a>检测 Series 中的缺失值</h4><p>所谓缺失值，顾名思义就是值不存在、丢失、缺少。</p><ul><li>isnull()：如果为值不存在或者缺失，则返回 True。</li><li>notnull()：如果值不存在或者缺失，则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ns = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">None</span>])</span><br><span class="line">print(pd.isnull(ns))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2    False</span></span><br><span class="line"><span class="string">3     True  # 不存在，返回True</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(pd.notnull(ns))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0     True</span></span><br><span class="line"><span class="string">1     True</span></span><br><span class="line"><span class="string">2     True</span></span><br><span class="line"><span class="string">3    False # 不存在，返回True</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;享有数据分析“三剑客之一”盛名的Pandas，主要包含Series和DataFram两种数据对象。它是一个开源的第三方 Python 库，从 Numpy 和 Matplotlib 的基础上构建而来。Pandas 已经成为 Python 数据分析的必备高级工具，它的目标是成为强大、灵活、可以支持任何编程语言的数据分析工具。&lt;/p&gt;
&lt;p&gt;Series：一种类似于一维数组的对象，是由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series对象可以存储整数、浮点数、字符串、python对象等多种数据类型的数据。仅由一组数据也可产生简单的Series对象。注意：Series中的索引值是可以重复的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="pandas" scheme="https://mengnn.cn/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>一分钟注册并使用ChatGPT人工智能</title>
    <link href="https://mengnn.cn/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E4%BD%BF%E7%94%A8ChatGPT/"/>
    <id>https://mengnn.cn/如何注册使用ChatGPT/</id>
    <published>2022-12-07T16:00:00.000Z</published>
    <updated>2023-06-27T02:40:33.614Z</updated>
    
    <content type="html"><![CDATA[<p>最近大火的ChatGPT项目强烈的吸引了我的注意力。于是乎就尝试的注册了一个账号，然后你会发现，能让你玩一天。什么取代搜索引擎，取代程序员都不是危言耸听的话。</p><p>开始之前先简单了解一下什么是ChatGPT：OpenAI的一个人工智能项目，说是能直接生成代码、自动修复bug、在线问诊、模仿名人写作甚至代替各大搜索引擎的一个人工智能项目。ChatGPT 是 OpenAI 训练的对话式大规模<a href="https://so.csdn.net/so/search?q=语言模型&spm=1001.2101.3001.7020" target="_blank" rel="noopener">语言模型</a>，以对话的方式进行交互。它和之前的另一款模型 InstructGPT 属于同级模型，代表“GPT 3.5”代。</p><a id="more"></a><p>既然是OpenAI的项目，那肯定是注册一个OpenAI的账户。注册账户是免费的，但是注册账户时国内的电话号码是不能用的，所以，需要购买一个国外的电话号码，用来接受短信。简单明了，所需材料如下：</p><ol><li>一个邮箱（国内可行）</li><li>一个国外电话号码（用来接受验证短信）</li><li>科学上网（目前国内地址注册会提示该国家不支持，所以要学会科学上网）</li></ol><h3 id="第一步通过邮箱注册"><a href="#第一步通过邮箱注册" class="headerlink" title="第一步通过邮箱注册"></a>第一步通过邮箱注册</h3><p>点击<a href="https://chat.openai.com/auth/login" target="_blank" rel="noopener">OpenAI登录</a>界面，点击Sign up进入到注册表单页进行邮箱注册。按照注册流程一步一步进行即可。</p><p><img src="../assets/20221208/1.png" alt="登录界面"></p><p><img src="../assets/20221208/2.png" alt="注册界面"></p><p>注册信息填写完毕后，会给你发送一份邮箱，让你确认邮箱地址。然后点击确认即可。然后会跳到一个填写姓名的 页面，自己随意填写即可。</p><p><img src="../assets/20221208/3.png" alt="姓名信息"></p><p>填写完成后，最重要的一步来了，需要你填写电话号码进行短信验证。电话列表里面虽然有中国选项，但是当你填写国内号码是你会发现提示你：<del>‘OpenAI’s services are not available in your country.’</del>，对，不支持国内号码，所以这个时候你就需要购买一个国外的电话号码。</p><p><img src="../assets/20221208/4.png" alt="电话信息"></p><h3 id="购买国外虚拟号码"><a href="#购买国外虚拟号码" class="headerlink" title="购买国外虚拟号码"></a>购买国外虚拟号码</h3><p>登录注册<a href="https://sms-activate.org/cn" target="_blank" rel="noopener">https://sms-activate.org/cn</a> 网站，里面有各种需要的号码。目前找到最便宜的是印度的号码，只需要0.85元（截止到2022年12月8日）。购买国外点好号码流程如下：</p><ol><li>登录注册上面的网站地址</li><li>点击右上角余额进行充值（支持支付宝支付，但是最低1美元起）</li><li>点击左侧的搜索框，输入OpenAI，点击搜索到的内容</li><li>选择一个你想要购买的国家，点击列表右边的购物车即可（我购买的是India的，最便宜）</li><li>然后页面中就会显示分配给你的电话号码，在进行接下来的操作</li></ol><p><img src="../assets/20221208/5.png" alt="搜索OpenAI"></p><p><img src="../assets/20221208/6.png" alt="点击购物车购买"></p><h3 id="复制号码进行验证"><a href="#复制号码进行验证" class="headerlink" title="复制号码进行验证"></a>复制号码进行验证</h3><p>复制上文加入到购物车的虚拟电话号码。其中前两位代表的是区号，后面几位才是实际意义上的电话号码。复制号码到你在OpenAI的验证号码页面，然后进行验证。点击‘Send Code’后应该就会在你的<a href="https://sms-activate.org/cn" target="_blank" rel="noopener">https://sms-activate.org/cn</a> 页面收到验证码，然后输入OpenAI注册验证即可（如果没有收到验证码，在二十分钟之内虚拟号码是可以免费更换的，我是一次就通过了，很快几秒钟就收到）。</p><p><img src="../assets/20221208/7.png" alt="验证码，电哈号码信息"></p><p>就这样，一切顺利，一分钟之内就可以注册完成。然后就可以体验ChatGPT的强大功能了。当你尝试后也许会落寞，因为它的确很轻大，强大到可能真的要替换部分人工工作。甚至搜索引擎都可以代替了，而且还没有广告。</p><p>我也尝试着让它帮忙输出一些JavaScript代码，真的很nice，而且还帮忙写了一首情诗。关于更强大的功能，后续慢慢摸索吧。</p><p><img src="../assets/20221208/8.png" alt="输出JavaScript程序"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近大火的ChatGPT项目强烈的吸引了我的注意力。于是乎就尝试的注册了一个账号，然后你会发现，能让你玩一天。什么取代搜索引擎，取代程序员都不是危言耸听的话。&lt;/p&gt;
&lt;p&gt;开始之前先简单了解一下什么是ChatGPT：OpenAI的一个人工智能项目，说是能直接生成代码、自动修复bug、在线问诊、模仿名人写作甚至代替各大搜索引擎的一个人工智能项目。ChatGPT 是 OpenAI 训练的对话式大规模&lt;a href=&quot;https://so.csdn.net/so/search?q=语言模型&amp;spm=1001.2101.3001.7020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;语言模型&lt;/a&gt;，以对话的方式进行交互。它和之前的另一款模型 InstructGPT 属于同级模型，代表“GPT 3.5”代。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="人工智能" scheme="https://mengnn.cn/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="openai" scheme="https://mengnn.cn/tags/openai/"/>
    
      <category term="ChatGPT" scheme="https://mengnn.cn/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>python批量下载图虫风景图片</title>
    <link href="https://mengnn.cn/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%9B%BE%E8%99%AB%E9%A3%8E%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>https://mengnn.cn/python批量下载图虫风景图片/</id>
    <published>2022-12-02T16:00:00.000Z</published>
    <updated>2023-06-27T02:38:13.329Z</updated>
    
    <content type="html"><![CDATA[<p>夜深人静，睡不着。突然浏览到<a href="https://tuchong.com/" target="_blank" rel="noopener">图虫网站</a>有多好看的图片，然后就尝试着用python批量下载了一些（仅用于自己欣赏）。当然如果有同学跟我一样睡不着的，又想批量下载好看的图片的，不如试试下面的代码（再次声明，仅限于便于欣赏）：</p><a id="more"></a><p>本次用到的python库包括：requests（用去请求要下载的图片地址），selenium（用于抓去源代码），re（用于格式化获取到的数据），pyquery(便于数据查找)。本次案例是针对于图虫搜索框中搜索关键字“风景”的内容图片下载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">抓去图虫网站中的风景图片</span></span><br><span class="line"><span class="string">https://stock.tuchong.com/search?availableOnly=&amp;page=1&amp;platform=image&amp;relevance_guarantee=false&amp;search_id=7172918711916020000&amp;size=100&amp;sortBy=0&amp;source=tc_pc_home_search&amp;term=%E9%A3%8E%E6%99%AF&amp;topic_id=</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(page)</span>:</span></span><br><span class="line">    <span class="comment"># driver.implicitly_wait(5)</span></span><br><span class="line">    url = <span class="string">f'https://stock.tuchong.com/search?availableOnly=&amp;page=<span class="subst">&#123;page&#125;</span>&amp;platform=image&amp;relevance_guarantee=false&amp;search_id=7172918711916020000&amp;size=100&amp;sortBy=0&amp;source=tc_pc_home_search&amp;term=%E9%A3%8E%E6%99%AF&amp;topic_id='</span></span><br><span class="line"></span><br><span class="line">    driver.get(url)</span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>) <span class="comment"># 显示等待，查询到标签存在再执行</span></span><br><span class="line">    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.justified-layout'</span>)))</span><br><span class="line">    html = driver.page_source</span><br><span class="line">    <span class="comment"># doc = pq(html).find('.justified-layout .justified-layout__item .image-item').attr('data-lazy-url')</span></span><br><span class="line">    doc = pq(html)</span><br><span class="line">    items = doc.find(<span class="string">'.justified-layout .justified-layout__item'</span>).items()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        src = item.find(<span class="string">'.image-item'</span>).attr(<span class="string">'data-lazy-url'</span>)</span><br><span class="line">        imgSrc = re.sub(<span class="string">'//'</span>, <span class="string">''</span>, src) <span class="comment"># 获取的链接url前面带有//,去除掉</span></span><br><span class="line">        name = re.match(<span class="string">'.*?/ml/(.*?).webp'</span>, src).group(<span class="number">1</span>) <span class="comment"># 通过获取的每个url中保存一个图片名字</span></span><br><span class="line">        <span class="comment"># print(src)</span></span><br><span class="line">        <span class="comment"># print(imgSrc)</span></span><br><span class="line">        <span class="comment"># print(name)</span></span><br><span class="line">        download_img(name, imgSrc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span><span class="params">(name, src)</span>:</span></span><br><span class="line">    src = <span class="string">'http://'</span> + src</span><br><span class="line">    img_content = requests.get(src, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'images/'</span> + name + <span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(img_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 获取前3页的图片(每页100张)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        get_page(i)</span><br></pre></td></tr></table></figure><p>三次声明，案例代码仅限于用于下载欣赏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;夜深人静，睡不着。突然浏览到&lt;a href=&quot;https://tuchong.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图虫网站&lt;/a&gt;有多好看的图片，然后就尝试着用python批量下载了一些（仅用于自己欣赏）。当然如果有同学跟我一样睡不着的，又想批量下载好看的图片的，不如试试下面的代码（再次声明，仅限于便于欣赏）：&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="图虫图片批量下载" scheme="https://mengnn.cn/tags/%E5%9B%BE%E8%99%AB%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="python案例" scheme="https://mengnn.cn/tags/python%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>The First Snow</title>
    <link href="https://mengnn.cn/The%20First%20snow/"/>
    <id>https://mengnn.cn/The First snow/</id>
    <published>2022-11-29T16:00:00.000Z</published>
    <updated>2023-06-27T02:16:53.605Z</updated>
    
    <content type="html"><![CDATA[<p>推开窗的一瞬间看到了雪，有人说看到了希望，有人说看到了寒冬……</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">推开窗的一瞬间看到了雪</span><br><span class="line"></span><br><span class="line">时而如盐粒般晶莹</span><br><span class="line"></span><br><span class="line">时而如棉絮般轻盈</span><br><span class="line"></span><br><span class="line">有人说看到了希望</span><br><span class="line"></span><br><span class="line">有人说看到了寒冬</span><br><span class="line"></span><br><span class="line">而我，看到的是</span><br><span class="line"></span><br><span class="line">晶莹般的雪粒</span><br><span class="line"></span><br><span class="line">握在手里即逝的美丽</span><br><span class="line"></span><br><span class="line">2022年11月30日 上海-静安</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推开窗的一瞬间看到了雪，有人说看到了希望，有人说看到了寒冬……&lt;/p&gt;
    
    </summary>
    
    
      <category term="诗词" scheme="https://mengnn.cn/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>解决tesserocr库安装报错问题</title>
    <link href="https://mengnn.cn/%E8%A7%A3%E5%86%B3python%E4%B8%AD%E5%AE%89%E8%A3%85tesserocr%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://mengnn.cn/解决python中安装tesserocr遇到的问题/</id>
    <published>2022-11-27T16:00:00.000Z</published>
    <updated>2023-06-27T02:39:58.701Z</updated>
    
    <content type="html"><![CDATA[<p>不可否认python是一门强大的语言，但也不能否认的是目前来看python有太多第三方库安装失败率很高。tesserocr验证码识别库就是其中一个。今天就用一些时间来解决tesserocr安装过程中遇到的报错及麻烦（window系统）。</p><a id="more"></a><h3 id="第一步：先安装tesseract"><a href="#第一步：先安装tesseract" class="headerlink" title="第一步：先安装tesseract"></a>第一步：先安装tesseract</h3><p>在安装tesserocr库之前，需要现在电脑上安装tesseract，<a href="https://digi.bib.uni-mannheim.de/tesseract/" target="_blank" rel="noopener">下载地址传送门</a>。下载适合你自己电脑的安装包即可。然后根据你的需求一路next即可。安装这个没什么特殊 。</p><p><img src="../assets/20221128/1.png" alt="tesseract下载包"></p><p>安装完后，需要配置环境变量：<strong>桌面我的电脑（右键）→ 属性 → 高级系统设置 → 环境变量设置</strong></p><p>首先在你的用户变量path里面新增一条你得tesseract的安装路径（比如我的路径）：F:\software\tesseract</p><p><img src="../assets/20221128/2.png" alt="配置用户变量"></p><p>然后在你的系统变量里面新增一个变量名：TESSDATA_PREFIX；</p><p>变量值（你的tesseract安装目录下的tessdata目录）：F:\software\tesseract\tessdata</p><p>配置好后什么也不说，点击保存确定。</p><p><img src="../assets/20221128/3.png" alt="配置系统变量"></p><h3 id="第二步：下载匹配你电脑的tesserocr资源"><a href="#第二步：下载匹配你电脑的tesserocr资源" class="headerlink" title="第二步：下载匹配你电脑的tesserocr资源"></a>第二步：下载匹配你电脑的tesserocr资源</h3><p>上面执行完以后，本以为会顺顺利利的执行‘pip install tesserocr pillow’，结果会让你大失所望，甚至会抓耳挠腮。有点想骂街了。对，会报错，莫名其妙的报错。莫着急，咱有办法。</p><p><img src="../assets/20221128/4.png" alt="报错信息"></p><p>下载对应的tesserocr资源到本地，然后在通过命令行来执行安装这个文件。<a href="https://github.com/simonflueckiger/tesserocr-windows_build/releases" target="_blank" rel="noopener">tesserocr资源传送门</a>。同样下载和你电脑匹配的版本即可（比如我的是python3.10，window64位）。</p><p><img src="../assets/20221128/5.png" alt="下载tesserocr资源"></p><p>下载完成后，记得在cmd中运行 pip install ‘你下载的文件’，文件可以直接拖进窗口。运行后终于看到了successful的字样。开心的像个200斤的胖子。</p><p><img src="../assets/20221128/6.png" alt="cmd命令行运行"></p><p>这个时候终于可以写代码了吧，当你在PyCharm编辑器中引入“import tesserocr”的时候发现，找不到此库。怎么办？</p><h3 id="第三步：在PyCharm的终端中再执行一次安装tesserocr资源的命令"><a href="#第三步：在PyCharm的终端中再执行一次安装tesserocr资源的命令" class="headerlink" title="第三步：在PyCharm的终端中再执行一次安装tesserocr资源的命令"></a>第三步：在PyCharm的终端中再执行一次安装tesserocr资源的命令</h3><p>对，把上面的步骤在你的编辑器终端命令里在执行一次，这次你会惊奇的发现成功了。当然也看到有网友说这一步也存在报错的可能，那就把你的tesseract安装包里面的tessdata文件夹复制到你的python安装包的script目录下，在执行上面的操作。</p><p><img src="../assets/20221128/7.png" alt="pyc编辑器终端运行"></p><p>终于终于算是一切进入正规了。</p><h3 id="第四步：开始敲代码"><a href="#第四步：开始敲代码" class="headerlink" title="第四步：开始敲代码"></a>第四步：开始敲代码</h3><p>引入tesserocr库，开始你的第一个验证码识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个image对象,传入要识别的图片地址</span></span><br><span class="line">image = Image.open(<span class="string">'y1.png'</span>)</span><br><span class="line"><span class="comment"># tesserocr库进行识别</span></span><br><span class="line">result = tesserocr.image_to_text(image)</span><br><span class="line"><span class="comment"># 打印识别后的结果</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>以上就是针对一个简单的图片验证码识别的过程。识别过程很简单，主要是安装过程有太多的坑，有的python第三方库兼容性的确很差，当然也希望第三方库以及python主体在兼容方面更完善一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不可否认python是一门强大的语言，但也不能否认的是目前来看python有太多第三方库安装失败率很高。tesserocr验证码识别库就是其中一个。今天就用一些时间来解决tesserocr安装过程中遇到的报错及麻烦（window系统）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="tesserorc" scheme="https://mengnn.cn/tags/tesserorc/"/>
    
  </entry>
  
  <entry>
    <title>再识李笑来</title>
    <link href="https://mengnn.cn/%E5%86%8D%E8%AF%86%E6%9D%8E%E7%AC%91%E6%9D%A5/"/>
    <id>https://mengnn.cn/再识李笑来/</id>
    <published>2022-11-25T16:00:00.000Z</published>
    <updated>2023-06-27T02:17:58.244Z</updated>
    
    <content type="html"><![CDATA[<p>难以想象再次了解李笑来竟然是在技术交流群里，群友分享了<a href="https://github.com/xiaolai/xiaolai.github.io" target="_blank" rel="noopener">李笑来的Github</a>，点进去后不可一发收拾，突然对这个人有了更大的“兴趣”。</p><p>最开始听到李笑来这个人的时候，是在币圈听说的。那个时候只知道他被称为中国比特币首富，用比特币套现百亿而且还称散户为“韭菜”。<a id="more"></a>当然后来他也写了一本<a href="http://lixiaolai.com/#/the-self-cultivation-of-leeks/cn/" target="_blank" rel="noopener">《韭菜的自我修养》</a>。反正就是币圈一直有关他的传说，一面被人高高捧起，一面又备受争议。后来他又不断的成为“天使投资人”、“连续创业者”甚至创办了新的基金等，这无不做实他割韭菜的“名声”。但今天想聊的并不是他如何赚钱或者如何割韭菜的。而是读了他的《人人都能用英语》、《自学是门手艺》、《微信互联网平民创业》等书籍后，对他关于学习态度的敬佩，一夜暴富有可能是意外，但每个成功的人的成功都不是意外。</p><p>国外的一个机构关于人的一生时间的用处，如果按照我们每个人的平均寿命为 78 年计算的话：</p><blockquote><ul><li>睡觉时间加起来大概是 28.3 年；</li><li>工作时间只有 10.5 年 —— 这是大多数人可出售全部时间；</li><li>花在各种各样社交媒体上的时间有 9 年；</li><li>花在做家务的时间有 6 年；</li><li>花在吃喝上的时间有 4 年；</li><li>花在真正接受教育的时间只有 3.5 年；</li><li>花在梳妆打扮上的时间有 3 年；</li><li>花在购物上的时间有 2.5 年；</li><li>花在照顾小孩的时间有 1.5 年；</li><li>花在路上的时间有 1.3 年；……</li></ul></blockquote><p>如此计算下来，供你自由支配的时间只剩下了 9 年，仅仅 9 年！你能够用来出售的时间，即，你的所有工作时间，其实只有 10.5 年。什么叫拼？如此看来，所谓的拼，无非就是 10.5 年全部用来售出之外，另外把可用来自由支配的时间也尽量甚至全都卖掉…… 可就算你把可供你自由支配的那 9 年全部用来出售，加起来也只不过是 19.5 年，根本做不到 “翻倍”。并且，比较一下你的工作时间和睡觉时间，一个是 10.5 年，另一个是 28.3 年，是不是觉得睡觉太贵了？</p><p>对，这正是李笑来说的。“是不是觉得睡觉太贵了？”，他甚至没有周末节假日之说，一年 365 天里竟然有 115 个 法定节假日！ 也就是说，一年的 ⅓ 被 “休息” 掉了！这种觉悟，是我们应该“修炼”的。</p><p>关于学习，作为英语老师的李笑来是有发言权的。他曾在《人人都能用英语》一书中问到：中国的学生从小学甚至幼儿园开始就接触英语，学习英语，为什么到了大学毕业能说英语的寥寥无几？甚至学了十几年，反而是越学越差？也许从他的回答中能让我们醍醐灌顶：因为我们从未相信自己能够学会、学好。是呀，问问自己，我们自己真的有相信过自己能学好一门外语吗？甚至我们自己并不知道“我们从未相信过”。尽管在过去的许多年里（小学六年、中学六年、本科四年……）我们一直都在 “努力” 学习英语，可事实上收效甚微。一旦肯坦然面对，每个 “努力学英语” 十数年而不得的人都会承认：这些年其实真正学习的时间少之又少。</p><p>说白了就是我们真正用心去学英语的时间几乎可以忽略。在我们国家，高考英语词汇大纲，基本上由 3500 个左右的词汇构成。就算我们每天认真记住10个单词，那一年左右的时间完全没问题的，但你问问自己十几年的学习我们现在能记住的有几个（我问了我自己，记住的屈指可数）？所以我们上学期间每天看似都在学习英语，但其实并没有真正的接纳认真的去学习。想想汉语是一门那么难的语言你都能学会，英语同样学了那么多年为什么就没学会呢？我自己的确应该反思了。</p><p>中国有句古话：活到老，学到老。想想我们年纪轻轻难到就已经放弃学习了吗？李笑来在《自学是门手艺》中详细的记录了他学习python的过程。真的是比我们优秀的人都还在努力变得更优秀，而我们却已经快要放弃开始变得优秀。一个老师，一个投资者，一个身价百亿的年过半百的人都还在学习新的知识，新的技术。我们的确应该思考点什么了。但是比较好的一点就是我们可以站在巨人的肩膀上，从他们的经验中吸取经验。所以从李笑来学习精神上，真的从心里由衷的敬佩。</p><p>绝大多数人，终其一生都没有自学过什么。他们也不是没学过，也不是没辛苦过，但事实却是：他们在有人教、有人带、有人逼的情况下都没真学明白那些基础知识…… 更可怕的是，他们学的那些东西中，绝大多数终其一生只有一个用处：考试。于是，考试过后，那些东西就 “考过即弃”了…… 不得不承认，应试教育的确是磨灭自学能力的最有效方法。</p><p>在随后的生活里，尽管能意识到自己应该学点什么，常有 “要是我也会这个东西就好了” 的想法，但基本上百分之百以无奈结束 —— 再也没有人教、再也没有人带、再也没有人逼…… 于是，每次 “决心重新做人” 都默默地改成 “继续做人” 而后逢年过节再次许愿 “重新做人”…… 这是有趣而又尴尬的真相。</p><p>活到老学到老，希望从我们决定“重新做人”的那一刻起，已经是一个新的灵魂。</p><p><a href="https://github.com/xiaolai/xiaolai.github.io" target="_blank" rel="noopener">李笑来Github</a></p><p><a href="http://lixiaolai.com/#/everyone-can-use-english/" target="_blank" rel="noopener">《人人都能用英语》</a></p><p><a href="http://lixiaolai.com/#/the-craft-of-selfteaching/" target="_blank" rel="noopener">《自学是门手艺》</a></p><p><a href="https://github.com/xiaolai/everyones-guide-for-starting-up-on-wechat-network" target="_blank" rel="noopener">《微信互联网平民创业》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难以想象再次了解李笑来竟然是在技术交流群里，群友分享了&lt;a href=&quot;https://github.com/xiaolai/xiaolai.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;李笑来的Github&lt;/a&gt;，点进去后不可一发收拾，突然对这个人有了更大的“兴趣”。&lt;/p&gt;
&lt;p&gt;最开始听到李笑来这个人的时候，是在币圈听说的。那个时候只知道他被称为中国比特币首富，用比特币套现百亿而且还称散户为“韭菜”。
    
    </summary>
    
    
      <category term="随笔" scheme="https://mengnn.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="生活" scheme="https://mengnn.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书笔记" scheme="https://mengnn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>爬取猫眼电影Top100最新版</title>
    <link href="https://mengnn.cn/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1top100%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <id>https://mengnn.cn/爬取猫眼电影top100最新版/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2023-06-27T02:40:14.925Z</updated>
    
    <content type="html"><![CDATA[<p>爬取猫眼电影网站Top100电影的详细信息并保存到excel表格内。</p><p>关于爬取猫眼电影网站的Top100的数据遇到了很多坑。首先就是获取源码时可能获取到的数据并不是你想要，其次就是多次爬取后发现获取不到正确的数据。对于这些问题或者说坑吧，下面写了一套最新的代码来避过这些坑。</p><a id="more"></a><p>本次主要用到的python库包括requests（请求数据），openpyxl（写入excel），re（正则），time（定时）。其中前两个库需要单独安装（如果没有安装的情况下）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">爬取网站：https://www.maoyan.com/board/4</span></span><br><span class="line"><span class="string">分析：通过网站发现每页有10条数据，Top100共有10页，而每次进行下一页时，链接后面会增加参数?offset=10,20,30...</span></span><br><span class="line"><span class="string">所以，可以定义一个for循环进行十次循环，每次请求一页的数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">坑：获取不到正确数据，因为少了cookies和user-agent参数</span></span><br><span class="line"><span class="string">    多次请求后，要更换cookies值，否则也获取不到正确数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1.设置一个获取一页数据的函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 设置header</span></span><br><span class="line">    headers = &#123;  </span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'referer'</span>: <span class="string">'https://passport.meituan.com/'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'自己获取'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    response = requests.get(url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2.定义解析处理函数,通过正则获取自己想要的数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*?)&lt;/p&gt;.*?releasetime"&gt;(.*?)&lt;/p&gt;.*?integer"&gt;(.*?)&lt;/i&gt;&lt;i class="fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,re.S)</span><br><span class="line">    items = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="comment"># print(item[0])</span></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'images'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'name'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'actor'</span>:item[<span class="number">3</span>].strip(),</span><br><span class="line">            <span class="string">'time'</span>:item[<span class="number">4</span>],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">5</span>]+item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment"># print(items)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3使用openpyxl写入到excel中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    <span class="comment">#添加工作表</span></span><br><span class="line">    sheet = wb.active</span><br><span class="line">    sheet.title = <span class="string">'猫眼电影top100'</span></span><br><span class="line">    titles = [<span class="string">'排名'</span>,<span class="string">'头像'</span>,<span class="string">'电影名字'</span>,<span class="string">'作者'</span>,<span class="string">'上映时间'</span>,<span class="string">'评分'</span>]</span><br><span class="line">    <span class="comment"># 首先写入表头数据</span></span><br><span class="line">    <span class="keyword">for</span> col_index,title <span class="keyword">in</span> enumerate(titles):</span><br><span class="line">        sheet.cell(<span class="number">1</span>,col_index+<span class="number">1</span>,title)</span><br><span class="line">    <span class="comment"># 添加生成的100条数据</span></span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> item:</span><br><span class="line">        sheet.append(text)</span><br><span class="line">    <span class="comment"># 保存工作薄</span></span><br><span class="line">    wb.save(<span class="string">"猫眼电影top100.xlsx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量，存储获取的100条数据</span></span><br><span class="line">itemarr = []</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">4.定义一个主函数，请求接口数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.maoyan.com/board/4?offset='</span>+str(offset)</span><br><span class="line">    html = get_page(url)</span><br><span class="line">    <span class="comment"># get_page(html)</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># print(list(item.values()))</span></span><br><span class="line">        itemarr.append(list(item.values()))</span><br><span class="line">    <span class="comment">#print(itemarr)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 定义十次循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        main(offset=i*<span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 循环结束调用写入表格数据</span></span><br><span class="line">    write_excel(itemarr)</span><br></pre></td></tr></table></figure><p>以上就是最新版的爬取猫眼电影Top100的完整代码，其中主要的问题就是cookies问题导致获取不到正确的数据，所以如果没有获取到自己想要的数据，可以关注这一方面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬取猫眼电影网站Top100电影的详细信息并保存到excel表格内。&lt;/p&gt;
&lt;p&gt;关于爬取猫眼电影网站的Top100的数据遇到了很多坑。首先就是获取源码时可能获取到的数据并不是你想要，其次就是多次爬取后发现获取不到正确的数据。对于这些问题或者说坑吧，下面写了一套最新的代码来避过这些坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="python案例" scheme="https://mengnn.cn/tags/python%E6%A1%88%E4%BE%8B/"/>
    
      <category term="猫眼电影爬取" scheme="https://mengnn.cn/tags/%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E7%88%AC%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>《云边有个小卖部》读后感：最伟大的爱</title>
    <link href="https://mengnn.cn/%E4%BA%91%E8%BE%B9%E6%9C%89%E4%B8%AA%E5%B0%8F%E5%8D%96%E9%83%A8/"/>
    <id>https://mengnn.cn/云边有个小卖部/</id>
    <published>2022-10-30T16:00:00.000Z</published>
    <updated>2023-06-27T02:18:40.116Z</updated>
    
    <content type="html"><![CDATA[<p>生命是有光的。在我熄灭以前，能够照亮你一点，就是我所有能做的了。</p><p>从小被曾祖父、曾祖母带大。他们经常做我喜欢吃的羊肉汤，炒方便面。而这两样美食至今没有人能超越他们。每次去学<a id="more"></a>校之前，都会跑到曾祖父曾祖母哪里待着不肯去学校，甚至有时会暗示他们想要一些零花钱，而他们每次都能理解我的“用意”，每次都能给我一些零花钱让我开开心心的上学去。无论风雪有多大，他们每次做好吃的都会拄着拐杖到我家叫我去吃，甚至有时候不能第一时间让我吃到美食，都会想法留着给我。而当他们离开人世的那一刻，我却没能待在他们身边，也许是因为我即将要高考，也许是因为我刚刚参加工作，但始终是我无法释怀的两件事（写到这里泪水已情不自禁湿润双眼）。是呀，我们总是在错过一些事情之后才知道珍惜，我们总会在失去的那一刻才知道珍贵。</p><p>我们每个人何尝不是“云边有个小卖部”的亲历者。用自己坚强的一生捍卫着外孙的王莺莺；与命运斗争，敢爱敢恨的程霜；为爱“改邪归正”，烧到自己发财之道“赌坊”的田大壮；还有那些无数个努力活着的“刘十三”。</p><p>亲情、爱情、友情，虽然没有华丽的辞藻，但每一句都是最真实的写照，最动情的言语，读着读着不禁潸然泪下。是那无私的亲情，伟大的爱情以及在你需要的时候总会出现的说不尽的友情。</p><p>王莺莺，一个潇洒活泼、天性有趣且能彪悍地开着拖拉机的老人。用尽她的一生都在爱着与她相依为命的外孙刘十三。虽然女儿在外孙四岁的时候就离家出走，但在她临走的那一刻也从未埋怨过，甚至每天都在期盼着女儿过得更好。七十多岁的王莺莺走的是安详的，因为她走前都已经安排好了所有的后事，甚至外孙的“婚事”。</p><p>敢爱敢恨，乐观又温柔的程霜。一生都在与命运斗争，很显然，她是胜利者。因为小时候生病的原因，第一次与刘十三相遇，就注定了他们两个一生脱不了关系。从小可以说青梅竹马，从那句“如果下次我们还能见面，我就做你的女朋友”到“如果下次再相见，我们就结婚吧”。很显然，幸运不是每时每刻都会光临一个人身上，虽然结果不是那么的完美，但在生命的最后一刻，她还在诠释着对六十三的爱：生命是有光的，在我熄灭以前，能够照亮你一点，就是我所有能做的了。我爱你，你要记得我。看到这一点，又有谁能控制住湿润的泪水。</p><p>有时候感觉上天很不公，但我相信程霜走的时候肯定是很安详的。至少她深知她爱着的人，她有一生忘不了的美好回忆。</p><p>一个从小立志就要走出村镇的刘十三。当他立志上清华北大，立志挣大钱远离小城镇。当现实的阳光照进他的生活，他才发现，并不是所有的阳光都是温暖的。当他没有考上理想的学校，当他发现恋爱了两年的女朋友竟然一直给他戴绿帽子，当他发现所有的工作并不是那么的顺利甚至被领导排挤，当他深夜买醉被年迈七十岁的外婆驱车上百公里带他回家的那一刻。也许才发现，最美好的地方就在那个云边的小卖部。所以开始了在家乡的拼搏，和那个对自己念念不忘的青梅竹马，和那个一起长大的发小还有那些看着他长大的父老乡情。</p><p>原来他并不如自己所想般深情，也并不如自己所想般颓废，真正的刘十三，一直在努力的活下去。而真正值得他珍惜的人就在他的身边，然后这一切，他醒悟的还不算晚。虽然两个爱的女人都已离去，但至少他陪着他们度过了最后愉快的时光。</p><p>是呀，为别人或者，也要为自己活着。希望和悲伤，都是一缕阳光。总有一天，我们会再相遇。不喜欢对号入座，但书中的故事也许就是我们大部人所经历的事情。</p><p>无论亲情、爱情还是友情，我们在决定一件事的时候请好好考虑，因为有些事情错过就是一辈子，有些东西没了就真的没了。</p><h3 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h3><ul><li>那么热的夏天，少年的后背被女孩的悲伤烫出一个洞，一直贯穿到心脏。</li><li>人和人之间舒服的关系，是可以一直不说话，也可以随时说话。</li><li>外婆说什么叫故乡，祖祖辈辈埋葬在这里，所以叫故乡。</li><li>正如浩瀚宇宙，你望见璀璨星光，满心沉醉，其实他穿越无数光年，你望见之际，说不定这枚星辰毁灭已久。悲伤的沉默，时间会打破，让两条河流去向不同的地方。执拗的沉默，自己会打破，执拗代表他将摧毁堤岸，哪怕河流就此干枯。</li><li>希望和悲伤，都是一缕光。总有一天，我们会再相遇。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命是有光的。在我熄灭以前，能够照亮你一点，就是我所有能做的了。&lt;/p&gt;
&lt;p&gt;从小被曾祖父、曾祖母带大。他们经常做我喜欢吃的羊肉汤，炒方便面。而这两样美食至今没有人能超越他们。每次去学
    
    </summary>
    
    
      <category term="随笔" scheme="https://mengnn.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://mengnn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="云间有个小卖部" scheme="https://mengnn.cn/tags/%E4%BA%91%E9%97%B4%E6%9C%89%E4%B8%AA%E5%B0%8F%E5%8D%96%E9%83%A8/"/>
    
  </entry>
  
  <entry>
    <title>python爬取天气并定时发送邮件</title>
    <link href="https://mengnn.cn/python%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>https://mengnn.cn/python爬取数据并定时发送邮件/</id>
    <published>2022-10-27T16:00:00.000Z</published>
    <updated>2023-06-27T02:37:52.989Z</updated>
    
    <content type="html"><![CDATA[<p>如何实现获取当天天气并每天定时发送未来七天天气情况到你的邮箱？</p><p>本次需要用到的库有：BeautifulSoup（数据处理），smtplib（邮件服务），MIMEText（发送邮件），schedule（定时库）。</p><a id="more"></a><p>在所有python环境都配置好的情况下，如果本地没有安装所需要的模块，都需要执行安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名</span><br></pre></td></tr></table></figure><p>创建python文件，并复制下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 引入请求数据库以及引入数据处理库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line"><span class="comment"># 引入邮件服务</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="comment"># 发送邮件库</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入定时库</span></span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定一个获取天气的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weather_spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 封装headers</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="comment"># 定义要获取页面的变量</span></span><br><span class="line">    url = <span class="string">'http://www.weather.com.cn/weather/101020100.shtml'</span></span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用BeautifulSoup模块获取数据</span></span><br><span class="line">    bsdata = BeautifulSoup(res.text,<span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="comment"># 使用find找到对应模块数据</span></span><br><span class="line">    weather_data = bsdata.find_all(class_=<span class="string">'sky'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个获取数据存储的变量</span></span><br><span class="line">    content_text = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 遍历获取的li</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> weather_data:</span><br><span class="line">        weather_day = item.find(<span class="string">"h1"</span>).text <span class="comment"># 日期</span></span><br><span class="line">        weather_wea = item.find(class_=<span class="string">"wea"</span>).text <span class="comment"># 天气</span></span><br><span class="line">        weather_tem = item.find(class_=<span class="string">"tem"</span>).text  <span class="comment"># 温度</span></span><br><span class="line"></span><br><span class="line">        content_text += <span class="string">'''</span></span><br><span class="line"><span class="string">          &lt;tr&gt;</span></span><br><span class="line"><span class="string">            &lt;td style="border:1px solid #ddd;padding:3px 5px;"&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td style="border:1px solid #ddd;padding:3px 5px;"&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td style="border:1px solid #ddd;padding:3px 5px;"&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        '''</span>%(weather_day,weather_wea,weather_tem)</span><br><span class="line">    <span class="comment"># 打印测试</span></span><br><span class="line">    print(content_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就是发送邮件的功能了</span></span><br><span class="line">    mailhost = <span class="string">"smtp.qq.com"</span> <span class="comment"># 163为smtp.163.com 其他的邮箱服务可以自行百度</span></span><br><span class="line">    <span class="comment"># 实例化一个smtplib模块里的SMTP类的对象，这样就可以用他的方法和属性了</span></span><br><span class="line">    qqmail = smtplib.SMTP()</span><br><span class="line">    <span class="comment"># 链接服务器，第一个为服务器地址，第二个为端口号</span></span><br><span class="line">    qqmail.connect(mailhost,<span class="number">25</span>) <span class="comment"># 25为常见端口号，其他可用端口号也可以</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义发件人邮箱，密码以及收件人</span></span><br><span class="line">    account = <span class="string">"1713445471@qq.com"</span></span><br><span class="line">    password = <span class="string">"phqxoahjwhpcdjag"</span> <span class="comment"># 密码毕竟比较私密，后期运行的时候自行填上即可</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    qqmail.login(account,password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义收件人</span></span><br><span class="line">    receiver = <span class="string">"fans_m@163.com"</span> <span class="comment"># 多个收件人可用数组形式['','']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个MINEText邮件对象，该对象有三个参数，分别为邮件正文，文本格式和编码,咱们这里以html为例</span></span><br><span class="line">    message = MIMEText(<span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;h1&gt;上海七天天气&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;table&gt;</span></span><br><span class="line"><span class="string">        &lt;thead&gt;</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;th style="border:1px solid #ddd;padding:3px 5px;color:#fff;background:#3dcd58;"&gt;日期&lt;/th&gt;</span></span><br><span class="line"><span class="string">                &lt;th style="border:1px solid #ddd;padding:3px 5px;color:#fff;background:#3dcd58;"&gt;天气&lt;/th&gt;</span></span><br><span class="line"><span class="string">                &lt;th style="border:1px solid #ddd;padding:3px 5px;color:#fff;background:#3dcd58;"&gt;温度&lt;/th&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;/thead&gt;</span></span><br><span class="line"><span class="string">        &lt;tbody&gt;%s&lt;/tbody&gt;</span></span><br><span class="line"><span class="string">    &lt;/table&gt;</span></span><br><span class="line"><span class="string">    '''</span>%(content_text),<span class="string">'HTML'</span>,<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义邮件主题</span></span><br><span class="line">    subject = <span class="string">"定时发送上海天气"</span></span><br><span class="line">    <span class="comment"># 实例化一个Header邮件头对象，该对象有两个参数，分别为邮件主题和编码</span></span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(subject,<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始发送邮件，调用sendmail()方法，写入三个参数，分别为发件人，收件人和字符串格式的正文</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        qqmail.sendmail(account,receiver,message.as_string())</span><br><span class="line">        print(<span class="string">"发送成功"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"发送失败"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出邮箱</span></span><br><span class="line">    qqmail.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="comment"># weather_spider()</span></span><br><span class="line"><span class="comment"># 测试一下看效果，别忘记密码，接收成功，接下来定时发送</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时任务，每2秒执行一次</span></span><br><span class="line">schedule.every(<span class="number">2</span>).seconds.do(weather_spider)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部完成，测试验证 完成了</span></span><br></pre></td></tr></table></figure><p>当然，定时可以每隔2秒一次，也可以按照小时，天数，或者指定的时间进行发送，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">schedule.every(<span class="number">10</span>).minutes.do(job)  <span class="comment"># 部署每10分钟执行一次job()函数的任务</span></span><br><span class="line">schedule.every().hour.do(job)  <span class="comment"># 部署每×小时执行一次job()函数的任务</span></span><br><span class="line">schedule.every().day.at(<span class="string">"10:30"</span>).do(job)  <span class="comment"># 部署在每天的10:30执行job()函数的任务</span></span><br><span class="line">schedule.every().monday.do(job)  <span class="comment"># 部署每个星期一执行job()函数的任务</span></span><br><span class="line">schedule.every().wednesday.at(<span class="string">"13:15"</span>).do(job)  <span class="comment"># 部署每周三的13：15执行函数的任务</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何实现获取当天天气并每天定时发送未来七天天气情况到你的邮箱？&lt;/p&gt;
&lt;p&gt;本次需要用到的库有：BeautifulSoup（数据处理），smtplib（邮件服务），MIMEText（发送邮件），schedule（定时库）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="python案例" scheme="https://mengnn.cn/tags/python%E6%A1%88%E4%BE%8B/"/>
    
      <category term="天气" scheme="https://mengnn.cn/tags/%E5%A4%A9%E6%B0%94/"/>
    
      <category term="数据分析" scheme="https://mengnn.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="定时发送邮件" scheme="https://mengnn.cn/tags/%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>自适应高度的textarea文本框</title>
    <link href="https://mengnn.cn/%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6%E7%9A%84textarea/"/>
    <id>https://mengnn.cn/自适应高度的textarea/</id>
    <published>2022-10-27T16:00:00.000Z</published>
    <updated>2023-06-27T02:39:29.186Z</updated>
    
    <content type="html"><![CDATA[<p>前天突然发现之前修改过的一个自适应文本框的方法，然后又尝试了一遍发现还挺好用。虽然现在前端基本都用框架搭建项目，而且也有很多的ui框架使用，很少人写原生的项目了。但是，毕竟我们都是从手写开始的，所以，看到之前的项目，就记录下来吧。需要者，可取之。</p><a id="more"></a><p>首先创建一个textarea标签，标签上面设置一个autoHeight属性，在下面的js方法中会用到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autoHeight</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写让其自适应的js方法，主要监听keyup实践，当鼠标输下的那一刻，来计算文本框的高度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.fn.autoHeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">autoHeight</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">            elem.style.height = <span class="string">'30px'</span>; <span class="comment">// 默认初始时的文本框高度，也可以设置为auto</span></span><br><span class="line">            elem.scrollTop = <span class="number">0</span>; <span class="comment">//防抖动</span></span><br><span class="line">            elem.style.height = elem.scrollHeight + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            autoHeight(<span class="keyword">this</span>);</span><br><span class="line">            $(<span class="keyword">this</span>).on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                autoHeight(<span class="keyword">this</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'textarea[autoHeight]'</span>).autoHeight();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好了，就这么简单，用的时候直接复制js文件即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天突然发现之前修改过的一个自适应文本框的方法，然后又尝试了一遍发现还挺好用。虽然现在前端基本都用框架搭建项目，而且也有很多的ui框架使用，很少人写原生的项目了。但是，毕竟我们都是从手写开始的，所以，看到之前的项目，就记录下来吧。需要者，可取之。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Html" scheme="https://mengnn.cn/tags/Html/"/>
    
      <category term="文本框" scheme="https://mengnn.cn/tags/%E6%96%87%E6%9C%AC%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>python实现excel插入任意空白行</title>
    <link href="https://mengnn.cn/python%E5%AE%9E%E7%8E%B0excel%E6%8F%92%E5%85%A5%E7%A9%BA%E7%99%BD%E8%A1%8C/"/>
    <id>https://mengnn.cn/python实现excel插入空白行/</id>
    <published>2022-10-11T16:00:00.000Z</published>
    <updated>2023-06-27T02:38:34.590Z</updated>
    
    <content type="html"><![CDATA[<p>有没有遇到过Excel表格任意行插入不规则的任意个空白行的需求？如果内容很少还好，可以手动完成。那如果有几百上千行数据，然后每行后面都需要插入指定的无规则空白行需要怎么实现呢？手动添加那不得累死在电脑旁，不用怕，几行python代码就能搞定。</p><a id="more"></a><p>在所有python环境都配置好的情况下，本次操作只需要引入<strong>openpyxl</strong>模块。当然，如果本地没有安装<strong>openpyxl</strong>模块的，只需要执行安装即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><p>创建python文件，并复制下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">fileName = <span class="string">"../data/测试数据.xlsx"</span></span><br><span class="line">workbook = openpyxl.load_workbook(fileName)  <span class="comment"># 返回一个workbook数据类型的值</span></span><br><span class="line">ws = workbook.active</span><br><span class="line"><span class="comment"># sheet = workbook.active  # 获取活动表 默认第一个表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取名字为Sheet1的表</span></span><br><span class="line">sheet = workbook[<span class="string">"Sheet1"</span>]</span><br><span class="line"><span class="comment"># print('当前活动表是：' + str(sheet))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 获取某一列的值</span></span><br><span class="line">rowValue = []</span><br><span class="line"><span class="comment"># 获取k列的值</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheet[<span class="string">'k'</span>]:</span><br><span class="line">    rowValue.append(cell.value)</span><br><span class="line"><span class="comment"># print(rowValue)</span></span><br><span class="line"><span class="comment"># 定义空行总和</span></span><br><span class="line">emptyNum = <span class="number">0</span></span><br><span class="line"><span class="comment"># 通过enumerate函数获取数组索引，index为索引，val为需要添加的空行</span></span><br><span class="line"><span class="keyword">for</span> index,val <span class="keyword">in</span> enumerate(rowValue):</span><br><span class="line">    <span class="comment"># print(index,val)</span></span><br><span class="line">    <span class="comment"># 第几行下面插入多少：k+1+(k-1列的n之和)  第k行 + 1 + (k-1)的空行总和</span></span><br><span class="line">    <span class="keyword">if</span> val &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># idx 为第几行插入 因为inx 从1开始，而index从0，故计算的时候要先+1</span></span><br><span class="line">        sheet.insert_rows(idx=(index+<span class="number">1</span>+<span class="number">1</span>+emptyNum), amount=val)</span><br><span class="line">    emptyNum += val</span><br><span class="line">    <span class="comment"># print(emptyNum)</span></span><br><span class="line"></span><br><span class="line">workbook.save(fileName)</span><br></pre></td></tr></table></figure><p>注意：</p><p>你需要在你要操作的Excel表格中某一列填写你需要在某一行下面要添加空白行的数量，不添加写0即可。此Demo中，在第K列标记了每行下面需要添加的空白行个数。</p><p>fileName：为你要操作的Excel文件</p><p>workbook[“Sheet1”]：Sheet1表示你要操作的Excel文件中的名字为Sheet1的表</p><p>sheet[‘k’]：k即为标记每行添加空白行个数的一列</p><hr><p><a href="https://openpyxl.readthedocs.io/en/stable/index.html​" target="_blank" rel="noopener">openpyxl文档</a></p><p><a href="https://www.python.org/" target="_blank" rel="noopener">python官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有没有遇到过Excel表格任意行插入不规则的任意个空白行的需求？如果内容很少还好，可以手动完成。那如果有几百上千行数据，然后每行后面都需要插入指定的无规则空白行需要怎么实现呢？手动添加那不得累死在电脑旁，不用怕，几行python代码就能搞定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="python" scheme="https://mengnn.cn/tags/python/"/>
    
      <category term="python案例" scheme="https://mengnn.cn/tags/python%E6%A1%88%E4%BE%8B/"/>
    
      <category term="数据分析" scheme="https://mengnn.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Excel" scheme="https://mengnn.cn/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>《人间值得》读后感</title>
    <link href="https://mengnn.cn/%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/"/>
    <id>https://mengnn.cn/人间值得/</id>
    <published>2022-09-24T16:00:00.000Z</published>
    <updated>2023-06-27T02:19:14.509Z</updated>
    
    <content type="html"><![CDATA[<p>人为什么会感到不安？对于不可预见的未来，一想到“该怎么办”“发生不好的事该怎么处理”“失败了该如何应对”时，就会感到不安，甚至失眠，甚至于对生活失去希望，那人间到底值不值得？我们辛苦一遭来到这个人世间又值不值得？</p><a id="more"></a><p>恒子老奶奶用90年的人生经历，从工作、生活、家庭中来告诉我们如何面对人生的喜怒哀乐，我们应该用什么样的态度来度过我们短暂而不同的人生。《人间值得》是由一位90岁高龄的心理医生中村恒子所著，一位年过九旬仍坚持在一线的、对工作，生活，家庭持有不同见解的老奶奶所著。她把对人生的见解，对生活的态度解析的淋漓尽致。没有华丽的辞藻，一句句普普通通的话，都能成为我们人生的座右铭。</p><h2 id="工作为了什么？"><a href="#工作为了什么？" class="headerlink" title="工作为了什么？"></a>工作为了什么？</h2><p>从本质上来说，人就是为了生活而工作，这个道理，亘古不变。而为了钱而工作，并不是可耻的事，这是理所当然的事，是了不起的事。当你面对“为了什么而工作”感到迷茫时，你就干脆而果断的告诉自己“工作只是为了赚钱养活自己而已”。这就是人为何要工作的根本。</p><p>没必要把工作当做非常严肃的事情对待，这样你就能享受工作。不要把自我价值全部建立在个工作上，带着“为身边的人略尽绵力”的想法而工作，获取会更好。饮食足以温饱，有工作需要自己，其实这样的生活刚刚好。过多的“空闲”，有时会带来负面影响，“适当忙碌”的状态反而更好。如果工作让你一直做出巨大的牺牲，那一定要果断离开，毫不犹豫。自己的人生就应该由自己做决定。</p><h2 id="必须要幸福？"><a href="#必须要幸福？" class="headerlink" title="必须要幸福？"></a>必须要幸福？</h2><p>一心想着“必须要幸福”，是完全不可能实现的。幸福与不幸福的说法，并无太大意义。“必须要幸福”，不这样想的话才会幸福，放下人生多余的行囊。</p><p>有些人对幸福与否的判断标准，往往是通过与人的比较，来确定自己幸福的标准。比如以收入高低，房子的大小，孩子的学校、成绩、外貌等来判断幸福，这毫无意义。无论你做甚，只要自己喜欢就可以，如果以“别人做什么，我也必须那样做”，一定会变得很幸苦。一字之差，却千差万别。</p><p>不要试图通过改变他人获得快乐，而是想“自己如何做才会快乐”或“怎么努力让自己在这里心情愉快地度过”。这才是应该考虑的关键。</p><p>生活中我也有过孤独和不安的时候。但不管怎样，我只能活着。如果意识到自己始终是一个人，就不会对别人心存太多期待。即使是家人也要分清彼此，强迫他人，自己和对方都很痛苦。</p><p>无论在职场还是家庭，“只要是别人给予的东西，自己就应该感谢对方”。如果以这样的心态和别人相处，人际关系就不可能出现大的问题。</p><p>如果不让过度期望“先入为主”，就会发现别的方法和途径。因此，不妨试试这样做。自己与对方保持一定的距离感，工作环境会得以改善，工作效率也会提高。</p><p>不要给幸福枷锁，这样才能更幸福。</p><h2 id="这就是自己的人生"><a href="#这就是自己的人生" class="headerlink" title="这就是自己的人生"></a>这就是自己的人生</h2><p>人毕竟是伟大的，无论遇到什么样的环境，都有可能坚定地认为“这就是自己的人生”，然后顺其自然地走下去。如果总也不顺利，那么你就要意识到，“人生本来就是这样”。“不顺”不只会光顾你的人生。如此一来，你无须改变自己的节奏，按照正常的步伐认认真真地去做，就会逐渐步入正轨，在不知不觉间走出低谷。不管怎么说，大多数事情都会得到解决，人生只能笑着走下去。</p><p>不要事事都想着咬紧牙关挺过去，只要抱着“今天这样做基本就可以了”的态度，日复一日地坚持积累。预期追求完美而挫折不断，不如以笨拙的方式坚持下去。</p><p>无论是孩子还是家庭，又或是工作，不要试图追求完美，保持一种细水长流的态度，结果会更好。生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度。</p><h2 id="关于老去"><a href="#关于老去" class="headerlink" title="关于老去"></a>关于老去</h2><p>孤独地死去非常好，担心死亡的方式毫无意义。</p><p>死亡后，无论你是被称赞，还是被评论，都与死人无关，因为听不见他们在说什么。任何事情有开始就会有结果，人只要出生，就会面对死亡。所以当我们面对这些的时候，放平心态也许会让我们更快乐的老去。</p><p>人生的结果不会马上呈现，但是在每个瞬间，都有必须珍惜的事情。人生，只要能照亮某个角落就够啦。</p><p>回到开始的问题，忧虑未来于事无补，谁也无法预料未来。与其忧愁的度过每一天，不如不要太用力，坦率地接受每一天。人间，还是有很多美好的事物值得我们去用心感受的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人为什么会感到不安？对于不可预见的未来，一想到“该怎么办”“发生不好的事该怎么处理”“失败了该如何应对”时，就会感到不安，甚至失眠，甚至于对生活失去希望，那人间到底值不值得？我们辛苦一遭来到这个人世间又值不值得？&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mengnn.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://mengnn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人间值得" scheme="https://mengnn.cn/tags/%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>nvm之NodeJS版本管理工具</title>
    <link href="https://mengnn.cn/nvm%E4%B9%8BNodeJS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://mengnn.cn/nvm之NodeJS版本管理工具/</id>
    <published>2022-09-15T16:00:00.000Z</published>
    <updated>2023-06-27T02:36:00.924Z</updated>
    
    <content type="html"><![CDATA[<p>nvm：全名node.js version management，是一个node的版本管理工具</p><p>在我们项目开发过程中，项目导入不同的依赖可能需要node版本也不同，node版本过高或者过低都会出现不同程度的错误或警示，这个时候我们就需要在电脑上安装多个版本的node，然后根据项目需求进行版本切换，这个时候就需要一个node版本管理工具，而nvm和n都是node.js版本管理工具，为了解决node.js各种版本存在不兼容现象可以通过它可以安装和切换不同版本的node.js。</p><a id="more"></a><h3 id="第一步：卸载你的NodeJs。"><a href="#第一步：卸载你的NodeJs。" class="headerlink" title="第一步：卸载你的NodeJs。"></a>第一步：卸载你的NodeJs。</h3><p>将电脑现在装的node进行卸载（没安装过请忽略），最好是删除所有关于node的文件及内容（因为之前遇到过没删除安装后，使用失败的问题）。</p><h3 id="第二步：安装nvm"><a href="#第二步：安装nvm" class="headerlink" title="第二步：安装nvm"></a>第二步：安装nvm</h3><p>通过Github服务器<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载安装</a></p><p>Github上面应该有很多版本的压缩包，下面我也列出来具体压缩包代表的意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置</span><br><span class="line">nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。</span><br><span class="line">Source code(zip)：zip压缩的源码</span><br><span class="line">Sourc code(tar.gz)：tar.gz的源码，一般用于Linux系统</span><br><span class="line">建议下载nvm-setup.zip版本</span><br></pre></td></tr></table></figure><p>下载完成后，按照安装操作一步一步安装就好了，很简单。</p><h3 id="第三步：测试nvm是否安装成功"><a href="#第三步：测试nvm是否安装成功" class="headerlink" title="第三步：测试nvm是否安装成功"></a>第三步：测试nvm是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在命令行中输入</span><br><span class="line">nvm -v  </span><br><span class="line">//version 1.1.7 出现版本号，说明安装成功，接下来就可以进行下面的操作</span><br></pre></td></tr></table></figure><h3 id="第四步：安装并控制node版本"><a href="#第四步：安装并控制node版本" class="headerlink" title="第四步：安装并控制node版本"></a>第四步：安装并控制node版本</h3><p>一顿操作猛如虎，接下来就可以随意切换我们的node版本号了。</p><p>首先我们可以通过<em>nvm list available</em>命令来查看可安装的Node版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p><img src="../assets/20220916/nvm1.png" alt="node可用版本"></p><p>然后通过<em>nvm install <version> [arch]</version></em>进行安装对应的node版本（nvm install latest命令为安装最新版本的node）。</p><p>其中<version>代表对应的node版本号，[arch]表示安装32位或64位的，默认是跟随系统的。所以一版情况下不用填写。</version></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 18.9.0</span><br></pre></td></tr></table></figure><p>安装完成后就可以通过<code>nvm use [version] [arch]</code> 来使用对应版本的node了。当然，在使用之前，你也可以通过<code>nvm list</code>或<code>nvm ls</code>查看目前已经安装的版本（ 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm ls   // 查看目前已经安装的版本</span><br><span class="line">nvm use 14.17.3  // 使用指定版本的nodejs</span><br></pre></td></tr></table></figure><p><img src="../assets/20220916/nvm2.png" alt="node已经安装的版本"></p><p><em>nvm uninstall <version></version></em>命令用来卸载指定版本node：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 14.17.3</span><br></pre></td></tr></table></figure><p>当然下面也有一些不常用，但也会用到的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nvm arch：显示node是运行在32位还是64位。</span><br><span class="line">nvm version ：显示nvm版本。version可简化为v。</span><br><span class="line">nvm on ：开启node.js版本管理。</span><br><span class="line">nvm off ：关闭node.js版本管理。</span><br><span class="line">nvm proxy [url] ：设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</span><br><span class="line">nvm node_mirror [url] ：设置node镜像。默认是https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span><br><span class="line">nvm npm_mirror [url] ：设置npm镜像。https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span><br><span class="line">nvm root [path] ：设置存储不同版本node的目录。如果未设置，默认使用当前目录。</span><br></pre></td></tr></table></figure><h3 id="nvm常见问题"><a href="#nvm常见问题" class="headerlink" title="nvm常见问题"></a>nvm常见问题</h3><p>如果下载node过慢，请更换国内镜像源, 在 nvm 的安装路径下，找到 settings.txt，设置node_mirro与npm_mirror为国内镜像地址。下载就飞快了~~</p><p>root: D:\nvm<br>path: D:\nodejs<br>node_mirror: <a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nvm：全名node.js version management，是一个node的版本管理工具&lt;/p&gt;
&lt;p&gt;在我们项目开发过程中，项目导入不同的依赖可能需要node版本也不同，node版本过高或者过低都会出现不同程度的错误或警示，这个时候我们就需要在电脑上安装多个版本的node，然后根据项目需求进行版本切换，这个时候就需要一个node版本管理工具，而nvm和n都是node.js版本管理工具，为了解决node.js各种版本存在不兼容现象可以通过它可以安装和切换不同版本的node.js。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="NodeJs" scheme="https://mengnn.cn/tags/NodeJs/"/>
    
      <category term="nvm" scheme="https://mengnn.cn/tags/nvm/"/>
    
      <category term="工具" scheme="https://mengnn.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CropperJs图片裁剪案例及教程</title>
    <link href="https://mengnn.cn/cropperJs%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E6%95%99%E7%A8%8B%E5%8F%8A%E6%A1%88%E4%BE%8B/"/>
    <id>https://mengnn.cn/cropperJs图片裁剪教程及案例/</id>
    <published>2022-08-23T16:00:00.000Z</published>
    <updated>2023-06-27T02:36:25.529Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发过程中相信大家应该都遇到过图片上传的问题，尤其是遇到千人千图千种规格，那最好的解决方法就是在上传过程中设定一定规格的裁剪功能，这样更能达到预期的效果。所以今天写一篇关于<strong>cropper.js</strong>图片裁剪插件的用例。当然，今天是基于它的V1版本的v1.5.12做的案例，cropper目前最新的是<a href="https://fengyuanchen.github.io/cropperjs/v2/" target="_blank" rel="noopener">V2(Beta)</a>版本，后续也会做一个关于v2版的用例。</p><p>本次的用例主要是用于移动端图片选择，以及相机拍照后的图片选择裁剪功能。详细代码请往下看，具体效果图请看文章末尾。</p><a id="more"></a><p>首先我们需要知道怎么使用cropperJs(V1)，当然这也是基础。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装方法有两种，npm安装和浏览器直接引入方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cropper jquery</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/cropper.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"js/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"js/cropper.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// 或者用cdn引入的方法</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/cropperjs/dist/cropper.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/cropperjs/dist/cropper.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在所有依赖引入后，就可以完全放心的使用它了。它的使用规则是通过new一个Cropper对象，然后里面可以传两个参数image，options。其中第一个参数为你要包装的图像或画布元素，第二个参数为cropper内置的一些属性设置及方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Cropper(image,options)</span><br></pre></td></tr></table></figure><p>下面是完整的移动端裁剪案例源码：</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-box"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 回显上传图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-img-box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-box"</span>&gt;</span>相机(图片)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"select-box"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 裁剪图片弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module-cropper"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module-cropper-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module-cropper-bg"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 包装图像或画布元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cropper-img-box"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"cropperImg"</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module-cropper-btn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">"cancelCropper()"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">"rotateCropper()"</span>&gt;</span>旋转<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">"cropperSucess()"</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">750px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.upload-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.upload-img-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.upload-img-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.upload-btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2DCEC2</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">    <span class="attribute">outline-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.module-cropper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,.8);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#cropperImg</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.module-cropper-content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.module-cropper-bg</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80vh</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cropper-img-box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">    <span class="comment">/* width: 100%; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.module-cropper-btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.module-cropper-btn</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> image = <span class="built_in">document</span>.getElementById(<span class="string">'cropperImg'</span>);<span class="comment">// 包装图像或画布元素</span></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    aspectRatio: <span class="number">16</span> / <span class="number">9</span>, <span class="comment">// 裁剪框的宽高比,默认NAN,可以随意改变裁剪框的宽高比</span></span><br><span class="line">    viewMode:<span class="number">0</span>,  <span class="comment">// 0,1,2,3</span></span><br><span class="line">    dragMode:<span class="string">'move'</span>, <span class="comment">// 'crop': 可以产生一个新的裁剪框 'move': 只可以移动 'none': 什么也不处理</span></span><br><span class="line">    <span class="comment">// preview:".small",  // 添加额外的元素(容器)以供预览</span></span><br><span class="line">    responsive:<span class="literal">true</span>, <span class="comment">//在调整窗口大小的时候重新渲染cropper,默认为true</span></span><br><span class="line">    restore:<span class="literal">true</span>, <span class="comment">// 调整窗口大小后恢复裁剪的区域。</span></span><br><span class="line">    checkCrossOrigin:<span class="literal">true</span>, <span class="comment">//检查当前图像是否为跨域图像,默认为true</span></span><br><span class="line">    modal:<span class="literal">true</span>, <span class="comment">// 显示图片上方的黑色模态并在裁剪框下面，默认为true</span></span><br><span class="line">    guides:<span class="literal">false</span>, <span class="comment">// 显示在裁剪框里面的虚线，默认为true</span></span><br><span class="line">    center:<span class="literal">true</span>, <span class="comment">// 裁剪框在图片正中心，默认为true</span></span><br><span class="line">    highlight:<span class="literal">true</span>, <span class="comment">// 在裁剪框上方显示白色的区域,默认为true</span></span><br><span class="line">    background:<span class="literal">false</span>, <span class="comment">// 显示容器的网格背景(即马赛克背景)，默认为true，若为false，这不显示</span></span><br><span class="line">    autoCrop:<span class="literal">true</span>, <span class="comment">// 当初始化时，显示裁剪框，改成false裁剪框消失需要你重绘裁剪区域，默认为true</span></span><br><span class="line">    autoCropArea:<span class="number">0.8</span>, <span class="comment">// 定义自动裁剪面积大小(百分比)和图片进行对比，默认为0.8</span></span><br><span class="line">    movable:<span class="literal">true</span>, <span class="comment">// 是否允许可以移动后面的图片，默认为true（但是如果dragMode为crop，由于和重绘裁剪框冲突，所以移动图片会失效）</span></span><br><span class="line">    rotatable:<span class="literal">true</span>, <span class="comment">// 是否允许旋转图像,默认为true</span></span><br><span class="line">    scalable:<span class="literal">true</span>, <span class="comment">// 是否允许缩放图像，默认为true</span></span><br><span class="line">    zoomable:<span class="literal">true</span>, <span class="comment">// 是否允许放大图像，默认为true</span></span><br><span class="line">    zoomOnTouch:<span class="literal">true</span>, <span class="comment">// 是否可以通过拖动触摸来放大图像，默认为true</span></span><br><span class="line">    wheelZoomRatio:<span class="number">0.1</span>, <span class="comment">// 用鼠标移动图像时，定义缩放比例,默认0.1</span></span><br><span class="line">    cropBoxMovable:<span class="literal">true</span>, <span class="comment">// 是否通过拖拽来移动剪裁框，默认为true</span></span><br><span class="line">    cropBoxResizable:<span class="literal">true</span>, <span class="comment">// 是否通过拖动来调整剪裁框的大小，默认为true</span></span><br><span class="line">toggleDragModeOnDblclick:<span class="literal">true</span>, <span class="comment">// 当点击两次时可以在“crop”和“move”之间切换拖拽模式，默认为true</span></span><br><span class="line">    crop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options); <span class="comment">// 初始化cropper对象</span></span><br></pre></td></tr></table></figure><h3 id="文中需要用的一些js方法"><a href="#文中需要用的一些js方法" class="headerlink" title="文中需要用的一些js方法"></a>文中需要用的一些js方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调起input（相机图片）事件</span></span><br><span class="line">$(<span class="string">".btn-box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#select-box'</span>).click()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// input事件</span></span><br><span class="line">$(<span class="string">'#select-box'</span>).on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">let</span> replaceSrc = evt.target.result;</span><br><span class="line">        <span class="comment">// 更换cropper的图片</span></span><br><span class="line">        cropper.replace(replaceSrc, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    $(<span class="string">".module-cropper"</span>).show();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消弹窗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelCropper</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".module-cropper"</span>).hide();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 旋转图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateCropper</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cropper.rotate(<span class="number">90</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片选择完成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cropperSucess</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> baseSrc = cropper.getCroppedCanvas().toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.7</span>);</span><br><span class="line">    <span class="comment">//console.log(baseSrc); // base64格式</span></span><br><span class="line">    $(<span class="string">".module-cropper"</span>).hide();</span><br><span class="line">    $(<span class="string">".upload-img-box"</span>).find(<span class="string">"img"</span>).attr(<span class="string">"src"</span>,baseSrc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是完整案例的代码，效果图可以看文章末尾。</p><h2 id="cropper常用参数及方法解析"><a href="#cropper常用参数及方法解析" class="headerlink" title="cropper常用参数及方法解析"></a>cropper常用参数及方法解析</h2><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>上面案例中设置了一些cropper常用的属性，当然它还有很多属性(类型包括string，Number，String，Function)等，下面罗列一些内置的属性即属性值：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">aspectRatio: 16 / 9, // 裁剪框的宽高比,默认NAN,可以随意改变裁剪框的宽高比</span><br><span class="line">viewMode:0,  // 0,1,2,3</span><br><span class="line">dragMode:'move', // 'crop': 可以产生一个新的裁剪框 'move': 只可以移动 'none': 什么也不处理</span><br><span class="line">preview:".small",  // 添加额外的元素(容器)以供预览</span><br><span class="line">responsive:true, //在调整窗口大小的时候重新渲染cropper,默认为true</span><br><span class="line">restore:true, // 调整窗口大小后恢复裁剪的区域。</span><br><span class="line">checkCrossOrigin:true, //检查当前图像是否为跨域图像,默认为true</span><br><span class="line">modal:true, // 显示图片上方的黑色模态并在裁剪框下面，默认为true</span><br><span class="line">guides:false, // 显示在裁剪框里面的虚线，默认为true</span><br><span class="line">center:true, // 裁剪框在图片正中心，默认为true</span><br><span class="line">highlight:true, // 在裁剪框上方显示白色的区域,默认为true</span><br><span class="line">background:false, // 显示容器的网格背景(即马赛克背景)，默认为true，若为false，这不显示</span><br><span class="line">autoCrop:true, // 当初始化时，显示裁剪框，改成false裁剪框消失需要你重绘裁剪区域，默认为true</span><br><span class="line">autoCropArea:0.8, // 定义自动裁剪面积大小(百分比)和图片进行对比，默认为0.8</span><br><span class="line">movable:true, // 是否允许可以移动后面的图片，默认为true（但是如果dragMode为crop，由于和重绘裁剪框冲突，所以移动图片会失效）</span><br><span class="line">rotatable:true, // 是否允许旋转图像,默认为true</span><br><span class="line">scalable:true, // 是否允许缩放图像，默认为true</span><br><span class="line">zoomable:true, // 是否允许放大图像，默认为true</span><br><span class="line">zoomOnTouch:true, // 是否可以通过拖动触摸来放大图像，默认为true</span><br><span class="line">wheelZoomRatio:0.1, // 用鼠标移动图像时，定义缩放比例,默认0.1</span><br><span class="line">cropBoxMovable:true, // 是否通过拖拽来移动剪裁框，默认为true</span><br><span class="line">cropBoxResizable:true, // 是否通过拖动来调整剪裁框的大小，默认为true</span><br><span class="line">toggleDragModeOnDblclick:true, // 当点击两次时可以在“crop”和“move”之间切换拖拽模式，默认为true</span><br><span class="line">minCanvasHeight:0, // canvas的最小高度，默认为0</span><br><span class="line">minCanvasWidth:0, // canvas的最小宽度，默认为0</span><br><span class="line">minContainerHeight:100, // 容器的最小高度，默认为100</span><br><span class="line">minContainerWidth:200, // 容器的最小宽度，默认为200</span><br><span class="line">minCropBoxWidth:0, // 裁剪层的最小宽度，默认为0</span><br><span class="line">minCropBoxHeight:0,// 裁剪层的最小高度，默认为0</span><br></pre></td></tr></table></figure><p>options类型为Function的属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ready:function()&#123;&#125;, // 插件准备完成执行的函数（只执行一次）</span><br><span class="line">crop:function()&#123;&#125;, // 剪裁框发生变化执行的函数</span><br><span class="line">zoom:function()&#123;&#125;, // 剪裁框缩放的时候执行的函数</span><br><span class="line">cropstart:function()&#123;&#125;, // 剪裁框开始移动执行的函数</span><br><span class="line">cropmove:function()&#123;&#125;, // 剪裁框移动时执行的函数</span><br><span class="line">cropend:function()&#123;&#125;, //剪裁框移动结束执行的函数</span><br></pre></td></tr></table></figure><h3 id="常用的一些Methods"><a href="#常用的一些Methods" class="headerlink" title="常用的一些Methods"></a>常用的一些Methods</h3><h4 id="replace-url-onlyColorChanged"><a href="#replace-url-onlyColorChanged" class="headerlink" title="replace(url[, onlyColorChanged])"></a>replace(url[, onlyColorChanged])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  替换图像的src并重新构建cropper,第一个参数为要替换的新的图片地址，第二个参数onlyColorChanged类型为Boolean，默认为false，如果只是改变颜色，而不是大小，那么cropper只需要改变所有相关图像的src，不需要重新构建cropper。这可以用于应用过滤器。</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.replace(replaceSrc, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="crop"><a href="#crop" class="headerlink" title="crop()"></a>crop()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动显示裁剪框</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(&#123;</span><br><span class="line">  autoCrop: <span class="literal">false</span>, <span class="comment">//关闭自动显示裁剪框</span></span><br><span class="line">  ready: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).cropper(<span class="string">'crop'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将图像和裁剪框重置为初始状态</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'reset'</span>);</span><br></pre></td></tr></table></figure><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除裁切框</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.clear();</span><br></pre></td></tr></table></figure><h4 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 销毁cropper并从图像中删除整个cropper</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'destroy'</span>);</span><br></pre></td></tr></table></figure><h4 id="move-offsetX-offsetY"><a href="#move-offsetX-offsetY" class="headerlink" title="move(offsetX[, offsetY])"></a>move(offsetX[, offsetY])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用相对偏移量移动图像(裁切框不移动)</span></span><br><span class="line"><span class="comment">// offsetX–类型：Number；在水平方向上移动（px） </span></span><br><span class="line"><span class="comment">// offsetY –类型：Number；在垂直方向上移动（px）；如果不存在，其值和offsetX相同；</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'move'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="moveTo-x-y"><a href="#moveTo-x-y" class="headerlink" title="moveTo(x[, y])"></a>moveTo(x[, y])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将画布(图像包装器)移动到一个绝对点</span></span><br><span class="line"><span class="comment">// X–类型：Number；画布canvas距离left的值； </span></span><br><span class="line"><span class="comment">// Y –类型：Number；画布canvas距离top的值；如果不存在，其值和X相同；</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'moveTo'</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="zoom-ratio"><a href="#zoom-ratio" class="headerlink" title="zoom(ratio)"></a>zoom(ratio)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 放大图片，并使用相对比例。（裁切框不变化）</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'zoom'</span>, <span class="number">0.1</span>);</span><br></pre></td></tr></table></figure><h4 id="rotate-degree"><a href="#rotate-degree" class="headerlink" title="rotate(degree)"></a>rotate(degree)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旋转图像以一定的角度</span></span><br><span class="line"><span class="comment">// 向右旋转 (degree &gt; 0)；向左旋转 (degree &lt; 0)；</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'rotate'</span>, <span class="number">45</span>);</span><br></pre></td></tr></table></figure><h4 id="getData-rounded"><a href="#getData-rounded" class="headerlink" title="getData([rounded])"></a>getData([rounded])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出最终裁剪的区域位置和大小数据(根据原始图像的自然大小</span></span><br><span class="line"><span class="comment">// rounded 类型：Boolean 默认：false；设置true可以获取其所有数据； </span></span><br><span class="line"><span class="comment">// 返回的数据类型：Object； </span></span><br><span class="line"><span class="comment">// - x裁切框距离左边的距离 </span></span><br><span class="line"><span class="comment">// - y裁切框距离顶部的距离 </span></span><br><span class="line"><span class="comment">// - width裁切框的宽度 </span></span><br><span class="line"><span class="comment">// - height裁切框的高度 </span></span><br><span class="line"><span class="comment">// - rotate裁切框的旋转的角度 </span></span><br><span class="line"><span class="comment">// - scaleX缩放图像的横坐标 </span></span><br><span class="line"><span class="comment">// - scaleY缩放图像的纵坐标 </span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'getData'</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="getImageData"><a href="#getImageData" class="headerlink" title="getImageData()"></a>getImageData()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出图像image位置、大小和其他相关数据</span></span><br><span class="line"><span class="comment">// - leftimage距离左边的距离 </span></span><br><span class="line"><span class="comment">// - topimage距离顶部的距离 </span></span><br><span class="line"><span class="comment">// - widthimage的宽度 </span></span><br><span class="line"><span class="comment">// - heightimage的高度 </span></span><br><span class="line"><span class="comment">// - naturalWidth image的原始宽度 </span></span><br><span class="line"><span class="comment">// - naturalHeight image的原始高度 </span></span><br><span class="line"><span class="comment">// - aspectRatio image的纵横比 </span></span><br><span class="line"><span class="comment">// - rotateimage的旋转的角度 </span></span><br><span class="line"><span class="comment">// - scaleX缩放图像的横坐标 </span></span><br><span class="line"><span class="comment">// - scaleY缩放图像的纵坐标</span></span><br><span class="line"><span class="keyword">let</span> cropper = <span class="keyword">new</span> Cropper(image,options);</span><br><span class="line">cropper.cropper(<span class="string">'getImageData'</span>)</span><br></pre></td></tr></table></figure><p>上面是我们应该能用到的大部分方法及内置属性了，只能说cropper真的很强大，几乎包含了我们实际开发中所需要的内容。下面是开头提到的案例截图，需要的可以自取源码。</p><p><img src="../assets/20220824/d1.jpg" alt="主页面，上传按钮及裁剪完成后回显内容"></p><p><strong><em>主页面，上传按钮及裁剪完成后回显内容</em></strong></p><p><img src="../assets/20220824/d2.jpg" alt="裁剪过程弹窗"></p><p><strong><em>裁剪过程弹窗</em></strong></p><p><img src="../assets/20220824/d3.jpg" alt="裁剪完成回显内容"></p><p><strong><em>裁剪完成回显内容</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发过程中相信大家应该都遇到过图片上传的问题，尤其是遇到千人千图千种规格，那最好的解决方法就是在上传过程中设定一定规格的裁剪功能，这样更能达到预期的效果。所以今天写一篇关于&lt;strong&gt;cropper.js&lt;/strong&gt;图片裁剪插件的用例。当然，今天是基于它的V1版本的v1.5.12做的案例，cropper目前最新的是&lt;a href=&quot;https://fengyuanchen.github.io/cropperjs/v2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;V2(Beta)&lt;/a&gt;版本，后续也会做一个关于v2版的用例。&lt;/p&gt;
&lt;p&gt;本次的用例主要是用于移动端图片选择，以及相机拍照后的图片选择裁剪功能。详细代码请往下看，具体效果图请看文章末尾。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="图片裁剪" scheme="https://mengnn.cn/tags/%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA/"/>
    
      <category term="插件" scheme="https://mengnn.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="cropper.js" scheme="https://mengnn.cn/tags/cropper-js/"/>
    
  </entry>
  
  <entry>
    <title>Less常用的操作</title>
    <link href="https://mengnn.cn/less%E6%95%99%E7%A8%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://mengnn.cn/less教程及常用的操作/</id>
    <published>2022-08-17T16:00:00.000Z</published>
    <updated>2023-06-27T02:35:34.778Z</updated>
    
    <content type="html"><![CDATA[<p>说到less，我们首先肯定会想到css或者scss。那抛开scss，就单独谈谈为什么选择了less，而非css，他们的区别又有那么些呢？</p><ul><li>Less是一门CSS预处理语言，css是一种用来表现HTML或XML等文件样式的计算机语言。</li><li>less扩展了CSS语言，增加了变量、Mixin、函数、运算、继承、嵌套等特性。</li><li>css可以被浏览器直接识别，less需要先编译为css。</li></ul><a id="more"></a><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>说白了就是less可以看做是一个工具，让你操作css更方便的工具。既然是工具，在使用它之前肯定就要去“安装”这个工具。<a href="https://lesscss.com.cn/usage/" target="_blank" rel="noopener">less官方</a>也提供了几种“使用工具”的方法：</p><h3 id="node环境中使用"><a href="#node环境中使用" class="headerlink" title="node环境中使用"></a>node环境中使用</h3><p>通过npm的安装方式全局安装或者项目目录安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><h3 id="浏览器中使用"><a href="#浏览器中使用" class="headerlink" title="浏览器中使用"></a>浏览器中使用</h3><p>通过引入less.js的方法，然后在浏览器中可以自动编译你的.less文件</p><p>首先，将<code>.less</code>样式表的<code>rel</code>属性设置为“ <code>stylesheet/less</code>”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet/less"</span> type=<span class="string">"text/css"</span> href=<span class="string">"styles.less"</span> /&gt;</span><br></pre></td></tr></table></figure><p>接下来，<a href="https://github.com/less/less.js/archive/master.zip" target="_blank" rel="noopener">下载less.js，</a>并将其包含在页面元素中的<code>&lt;script&gt;&lt;/script&gt;</code>标记中<code>&lt;head&gt;</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"less.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当然你也可以配置一些设定选项，这个可以转移到官网查看详情配置，这里就不过多赘述。</p><h3 id="使用工具-插件装换格式"><a href="#使用工具-插件装换格式" class="headerlink" title="使用工具/插件装换格式"></a>使用工具/插件装换格式</h3><p>我用过比较好的一个工具是<a href="http://koala-app.com/index-zh.html" target="_blank" rel="noopener">Koala（考拉）</a>，koala是一个前端预处理器语言图形编译工具，支持Less、Sass、Compass、CoffeeScript，帮助web开发者更高效地使用它们进行开发。跨平台运行，完美兼容windows、linux、mac。可以直接把less文件装换成css文件，快速方便可配置。</p><p>当然有的开发工具也带有转换less为css文件的插件，比如<a href="https://www.dcloud.net.cn/hbuilderx.html" target="_blank" rel="noopener">Hbuilder X</a>前端开发工具，安装less转换插件即可，可右键直接生成css文件</p><h2 id="常用操作及技巧"><a href="#常用操作及技巧" class="headerlink" title="常用操作及技巧"></a>常用操作及技巧</h2><p>当然，前面说的这么多不是今天的重点，重点是下面的一些关于less常用的操作及技巧。</p><h3 id="变量（-）"><a href="#变量（-）" class="headerlink" title="变量（@）"></a>变量（@）</h3><h4 id="通过-符号定义变量并且使用。"><a href="#通过-符号定义变量并且使用。" class="headerlink" title="通过@符号定义变量并且使用。"></a>通过@符号定义变量并且使用。</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span><span class="number">#4078cb</span>;</span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#4078cb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量也可以用在如：选择器名称，属性名称等"><a href="#变量也可以用在如：选择器名称，属性名称等" class="headerlink" title="变量也可以用在如：选择器名称，属性名称等"></a>变量也可以用在如：选择器名称，属性名称等</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@my-selector:</span> banner;</span><br><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;</span><br><span class="line"><span class="selector-class">.@&#123;my-selector&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/white-sand.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"../img/white-sand.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h3><p>变量可以进行加减乘除运算，加减法时，以第一个数据的单位为基准，乘除法是，单位要统一。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span><span class="number">300px</span>;</span><br><span class="line"><span class="variable">@color:</span><span class="number">#222</span>;</span><br><span class="line"><span class="variable">@fontSize:</span><span class="number">14px</span>;</span><br><span class="line"><span class="selector-class">.top</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="variable">@width</span> - <span class="number">20</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="variable">@width</span> - <span class="number">20</span>*<span class="number">5</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="variable">@color</span>*<span class="number">2</span>;</span><br><span class="line"><span class="attribute">background-color</span>:<span class="variable">@color</span> + <span class="number">#111</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="variable">@fontSize</span>*<span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444444</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：加减运算时要注意符号左右两侧留空格，否则可能会有报错的风险。</p><h3 id="嵌套及连接符（-amp-）"><a href="#嵌套及连接符（-amp-）" class="headerlink" title="嵌套及连接符（&amp;）"></a>嵌套及连接符（&amp;）</h3><h4 id="父母选择器可用过嵌套的方式实现"><a href="#父母选择器可用过嵌套的方式实现" class="headerlink" title="父母选择器可用过嵌套的方式实现"></a>父母选择器可用过嵌套的方式实现</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#4078cb</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;<span class="attribute">color</span>:<span class="number">#4078cb</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="amp-操作符可实现伪类选择器、连接等操作"><a href="#amp-操作符可实现伪类选择器、连接等操作" class="headerlink" title="&amp;操作符可实现伪类选择器、连接等操作"></a>&amp;操作符可实现伪类选择器、连接等操作</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-ok</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"ok.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-cancel</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"cancel.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-custom</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"custom.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button-ok</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"ok.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-cancel</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"cancel.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-custom</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"custom.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&amp;</code>代表所有父选择器（而不仅仅是最接近的祖先），因此以下示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grand</span> &#123;</span><br><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span> &gt; <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span>, <span class="selector-tag">&amp;</span><span class="selector-tag">ish</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: cyan;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grand</span> <span class="selector-class">.parent</span> &gt; <span class="selector-class">.grand</span> <span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grand</span> <span class="selector-class">.parent</span> <span class="selector-class">.grand</span> <span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grand</span> <span class="selector-class">.parent</span><span class="selector-class">.grand</span> <span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grand</span> <span class="selector-class">.parent</span>,</span><br><span class="line"><span class="selector-class">.grand</span> <span class="selector-class">.parentish</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: cyan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less转义"><a href="#less转义" class="headerlink" title="less转义"></a>less转义</h3><p>通过‘~’符号对其后面的内容进行转义：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="string">~"green"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在将LESS代码编译为CSS代码之后，〜“some_text”中的任何内容将显示为 some_text 。为什么需要这样的操作呢，比如在使用calc()方法计算的时候，如果不转义，就会识别出来，所以这个时候就必须要用这个‘~’来进行转义。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可以通过“/**/”或者“//”的方法对代码进行注释，但是后者注释方法在编译后的文件中不显示。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这是一个长注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 这是一个短注释</span></span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这是一个长注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="混合mixin模式"><a href="#混合mixin模式" class="headerlink" title="混合mixin模式"></a>混合mixin模式</h3><p>混合类似于编程语言中的函数。 Mixins是一组CSS属性，允许您将一个类的属性用于另一个类，并且包含类名作为其属性。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p2</span>&#123;</span><br><span class="line">  <span class="attribute">background </span>: <span class="number">#4078cb</span>;</span><br><span class="line">  <span class="selector-class">.p1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p3</span>&#123;</span><br><span class="line">   <span class="attribute">background </span>: <span class="number">#3dcd58</span>;</span><br><span class="line">  <span class="selector-class">.p1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#4078cb</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3dcd58</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mixins不仅可以包含属性，还可以包含选择器。"><a href="#mixins不仅可以包含属性，还可以包含选择器。" class="headerlink" title="mixins不仅可以包含属性，还可以包含选择器。"></a>mixins不仅可以包含属性，还可以包含选择器。</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hover</span>() &#123;</span><br><span class="line"><span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="selector-class">.hover</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>命名空间用于在通用名称下对mixin进行分组，进行针对性的内容引用继承。使用命名空间可以避免名称冲突，并从外部封装mixin组。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.h1</span>() &#123;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line"><span class="selector-class">.span</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line"><span class="selector-class">.h1</span>&gt; <span class="selector-class">.span</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混合参数"><a href="#混合参数" class="headerlink" title="混合参数"></a>混合参数</h4><p>参数mixin使用一个或多个参数，通过参数和其属性来扩展LESS的功能，以便在混合到另一个块时自定义mixin输出。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>; <span class="variable">@style</span>; <span class="variable">@color</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@style</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">2px</span>; dashed; green);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p><strong>@import</strong> 伪指令用于在代码中导入文件。 它将LESS代码分布在不同的文件上，并允许轻松地维护代码的结构。 您可以将 <em>@import</em> 语句放在代码中的任何位置。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import.less</span></span><br><span class="line"><span class="selector-class">.myImport</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">14px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style.less </span></span><br><span class="line"><span class="comment">// 导入 import.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"import.less"</span></span><br></pre></td></tr></table></figure><p>style.less编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myImport</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">14px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>LESS的一个特性，它允许使用单个属性从多个属性中为逗号或空格分隔列表添加值。为了避免任何无意的联接，在每个联接未决声明上都需要显式<code>+</code>或<code>+_</code>标记。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(2) <span class="built_in">rotate</span>(15deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loops循环"><a href="#loops循环" class="headerlink" title="loops循环"></a>loops循环</h3><p>Loops语句允许我们多次执行一个语句或一组语句。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cont</span>(<span class="variable">@count</span>) <span class="keyword">when</span> (<span class="variable">@count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.cont</span>((<span class="variable">@count</span> - <span class="number">1</span>));</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">25px</span> * <span class="variable">@count</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.cont</span>(<span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">125px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">175px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h3><h4 id="颜色函数darken-color-amount"><a href="#颜色函数darken-color-amount" class="headerlink" title="颜色函数darken(color,amount )"></a>颜色函数darken(color,<strong>amount</strong> )</h4><p>darken降低了元素中颜色的亮度，有两个可选参数，color：代表颜色对象，amount：包含0 - 100%之间的百分比。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass1</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: hsl(<span class="number">80</span>, <span class="number">90%</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myclass2</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: darken(hsl(<span class="number">80</span>, <span class="number">90%</span>, <span class="number">20%</span>), <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#426105</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myclass2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#213003</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="颜色函数lighten-color-amount"><a href="#颜色函数lighten-color-amount" class="headerlink" title="颜色函数lighten(color,amount )"></a>颜色函数lighten(color,<strong>amount</strong> )</h4><p>lighten增加了元素中颜色的亮度，有两个可选参数，color：代表颜色对象，amount：包含0 - 100%之间的百分比。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass1</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: hsl(<span class="number">80</span>, <span class="number">90%</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myclass2</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: lighten(hsl(<span class="number">80</span>, <span class="number">90%</span>, <span class="number">20%</span>), <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#426105</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myclass2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#639108</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="颜色混合函数multiply-color1-color2"><a href="#颜色混合函数multiply-color1-color2" class="headerlink" title="颜色混合函数multiply(color1,color2)"></a>颜色混合函数multiply(color1,color2)</h4><p>将两种颜色相乘。 对应的RGB通道的两个颜色相乘，然后除以255以得到较暗的颜色作为结果。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: multiply(<span class="number">#111111</span>,<span class="number">#222222</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#020202</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><h4 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h4><p>将数字向上舍入为下一个最大整数。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:ceil(<span class="number">0.7</span>);  <span class="comment">//  编译后： opacity:1;</span></span><br></pre></td></tr></table></figure><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>将数字向下取整为下一个最小整数。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:floor(<span class="number">1.3</span>);  <span class="comment">//  编译后： opacity:1;</span></span><br></pre></td></tr></table></figure><h4 id="percentage"><a href="#percentage" class="headerlink" title="percentage()"></a>percentage()</h4><p>将浮点数转换为百分比字符串。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:percentage(<span class="number">0.2</span>);  <span class="comment">//  编译后： opacity:20%;</span></span><br></pre></td></tr></table></figure><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><p>它指定一个或多个参数的最小值。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:min(<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.3</span>,<span class="number">4</span>);  <span class="comment">//  编译后： opacity:0.1;</span></span><br></pre></td></tr></table></figure><h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><p>它指定一个或多个参数的最大值。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:min(<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.3</span>,<span class="number">1</span>);  <span class="comment">//  编译后： opacity:1;</span></span><br></pre></td></tr></table></figure><h3 id="类型函数"><a href="#类型函数" class="headerlink" title="类型函数"></a>类型函数</h3><h4 id="isnumber"><a href="#isnumber" class="headerlink" title="isnumber()"></a>isnumber()</h4><p>它使用一个值作为参数，如果它是一个数字返回 <em>true</em> ，否则为 <em>false</em></p><h4 id="isstring"><a href="#isstring" class="headerlink" title="isstring()"></a>isstring()</h4><p>它使用一个值作为参数，如果它是一个字符串返回 <em>true</em> ，否则为 <em>false</em></p><h4 id="iscolor"><a href="#iscolor" class="headerlink" title="iscolor()"></a>iscolor()</h4><p>它使用一个值作为参数，如果如果值是颜色返回 <em>true</em> ，否则为 <em>false</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iscolor(#fff);        // true</span><br><span class="line">iscolor(red);         <span class="comment">// true</span></span><br><span class="line">iscolor(<span class="number">1234</span>);        <span class="comment">// false</span></span><br><span class="line">iscolor(<span class="number">24</span>px);        <span class="comment">// false</span></span><br><span class="line">iscolor(<span class="number">7.8</span>%);        <span class="comment">// false</span></span><br><span class="line">iscolor(<span class="string">"variable"</span>);  <span class="comment">// false</span></span><br><span class="line">iscolor(keyword);     <span class="comment">// false</span></span><br><span class="line">iscolor(url(...));    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="isurl"><a href="#isurl" class="headerlink" title="isurl()"></a>isurl()</h4><p>它使用一个值作为参数，如果值为url返回 <em>true</em> ，否则为 <em>false</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isurl(url(...));      <span class="comment">// true</span></span><br><span class="line">isurl(keyword);       <span class="comment">// false</span></span><br><span class="line">isurl(<span class="number">1234</span>);          <span class="comment">// false</span></span><br><span class="line">isurl(<span class="number">24</span>px);          <span class="comment">// false</span></span><br><span class="line">isurl(<span class="number">7.8</span>%);          <span class="comment">// false</span></span><br><span class="line">isurl(#fff);          // false</span><br><span class="line">isurl(red) ;          <span class="comment">// false</span></span><br><span class="line">isurl(<span class="string">"variable"</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="ispixel"><a href="#ispixel" class="headerlink" title="ispixel()"></a>ispixel()</h4><p>它使用一个值作为参数，如果值是以像素为单位的数字返回 <em>true</em> ，否则为 <em>false</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ispixel(<span class="number">24</span>px);          <span class="comment">// true</span></span><br><span class="line">ispixel(<span class="number">1234</span>);          <span class="comment">// false</span></span><br><span class="line">ispixel(<span class="number">7.8</span>%);          <span class="comment">// false</span></span><br><span class="line">ispixel(keyword);       <span class="comment">// false</span></span><br><span class="line">ispixel(#fff);          // false</span><br><span class="line">ispixel(red) ;          <span class="comment">// false</span></span><br><span class="line">ispixel(<span class="string">"variable"</span>);    <span class="comment">// false</span></span><br><span class="line">ispixel(url(...));      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><h4 id="escape"><a href="#escape" class="headerlink" title="escape()"></a>escape()</h4><p>它通过对特殊字符使用URL编码来对字符串或信息进行编码。 您无法编码一些字符，例如<strong>，</strong>， <strong>/</strong> ，<strong>？</strong> ， <strong>@</strong> ，<strong>＆amp;</strong> ， <strong>+</strong> ，<strong>〜</strong>，<strong>！</strong> ， <strong>$</strong> ，<strong>&#39;</strong>和您可以编码的一些字符，例如 <strong>\</strong> ，<strong>#</strong>， <strong>&gt; ^</strong> ，<strong>(</strong>，<strong>)</strong>， <strong>{</strong>，<strong>}</strong> ，<strong>:</strong> &gt;，<strong>＆gt;</strong> ，<strong>，] ， [和 = 。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">"Hello!! welcome to Tutorialspoint!"</span>)  <span class="comment">// 编译后：Hello%21%21%20welcome%20to%20Tutorialspoint%21</span></span><br></pre></td></tr></table></figure><h4 id="e"><a href="#e" class="headerlink" title="e()"></a>e()</h4><p>它是一个字符串函数，它使用string作为参数，并返回不带引号的信息。 它是一个CSS转义，它使用<em>〜“一些内容”</em>转义的值和数字作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: e(<span class="string">"Hello!! welcome to Tutorialspoint!"</span>);  <span class="comment">// 编译后：filter: Hello!! welcome to Tutorialspoint!;</span></span><br></pre></td></tr></table></figure><h4 id="format"><a href="#format" class="headerlink" title="% format()"></a>% format()</h4><p>此函数格式化一个字符串。 它可以写成以下格式：%(string，arguments …) </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format-a-d: %(<span class="string">"myvalues: %a myfile: %d"</span>, <span class="number">2</span> + <span class="number">3</span>, <span class="string">"mydir/less_demo.less"</span>); <span class="comment">// 编译后：format-a-d: （"myvalues: 5 myfile: "mydir/less_demo.less"）;</span></span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><h4 id="image-size"><a href="#image-size" class="headerlink" title="image-size()"></a>image-size()</h4><p>它用于从文件检查图像的维度。 它检查图像的宽度和高度。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">   <span class="attribute">background-image</span>:url(<span class="string">"top.jpg"</span>);</span><br><span class="line">   <span class="attribute">image-size</span>:image-size(<span class="string">"top.jpg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">   <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"top.jpg"</span>);</span><br><span class="line">   <span class="attribute">image-size</span>: <span class="number">1200px</span> <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="image-width-，image-height"><a href="#image-width-，image-height" class="headerlink" title="image-width()，image-height()"></a>image-width()，image-height()</h3><p>分别用于检测图像的宽度和高度。</p><h4 id="convert"><a href="#convert" class="headerlink" title="convert()"></a>convert()</h4><p>数字从一个单位转换为另一个单位。 它包括两个论点; 第一个参数遍编号以及单位和第二个参数包含单位。 当本机兼容时，转换该数字。 如果第一个参数不变，则单位不兼容。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">meter</span>:convert(<span class="number">10cm</span>, mm);</span><br><span class="line">  <span class="attribute">time</span>:convert(<span class="number">3s</span>, <span class="string">"ms"</span>);</span><br><span class="line">  <span class="attribute">no-unit</span>:convert(<span class="number">5</span>, mm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">meter</span>: <span class="number">100mm</span>;</span><br><span class="line">  <span class="attribute">time</span>: <span class="number">3000ms</span>;</span><br><span class="line">  <span class="attribute">no-unit</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>当然上面的内容只是less用例中的一部分，只是开发过程中比较常用的。当然，现在的开发越来越倾向于less或者scss等方式，主要的原因还是相对于css他们大大的减少了开发量，减少了代码冗余，方便了开发者。所以这是一个进步的时代，更是一个不断追求美好的时代！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到less，我们首先肯定会想到css或者scss。那抛开scss，就单独谈谈为什么选择了less，而非css，他们的区别又有那么些呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Less是一门CSS预处理语言，css是一种用来表现HTML或XML等文件样式的计算机语言。&lt;/li&gt;
&lt;li&gt;less扩展了CSS语言，增加了变量、Mixin、函数、运算、继承、嵌套等特性。&lt;/li&gt;
&lt;li&gt;css可以被浏览器直接识别，less需要先编译为css。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://mengnn.cn/tags/css/"/>
    
      <category term="less" scheme="https://mengnn.cn/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>安利一款免费无损图片压缩工具-TinyPNG</title>
    <link href="https://mengnn.cn/ft29/"/>
    <id>https://mengnn.cn/ft29/</id>
    <published>2022-07-23T16:00:00.000Z</published>
    <updated>2023-06-27T02:34:55.235Z</updated>
    
    <content type="html"><![CDATA[<p>一款相见恨晚的图片智能压缩工具<a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG</a>，之所以安利这款图片压缩工具，是因为实在太好用了，用过后已爱不释手。他不仅有在线版，更有HBuilder插件版，不仅对开发者很友好，对广大群众同样很友好。而且它还具备以下优秀的特点：</p><ol><li>免注册，免登录，完全免费，切不限制压缩数量（插件版有每月500张的限制）</li><li>高压缩率（一般都是70%的压缩率）。</li><li>使用智能压缩，不损失画质和观感。</li><li>全面支持WEBP、jpeg和png格式。</li><li>一次支持多张图片压缩，切插件版支持文件夹压缩。</li></ol><h2 id="web在线版"><a href="#web在线版" class="headerlink" title="web在线版"></a>web在线版</h2><p>web在线版有两个版本，英文版<a href="TinyPNG">TinyPNG</a>和中文版<a href="https://tinify.cn/" target="_blank" rel="noopener">TinyPNG</a>，其实没什么区别，无非就是中英文互译而已，不影响使用。</p><a id="more"></a><p>只需要通过拖拽图片到压缩框内即可，一次支持最多拖动20张图片，每张图片最大支持5MB。而且压缩率基本在70%左右，有些甚至能达到百分之八九十。甚至，压缩过后基本看不出有任何区别，当然对于那些钻牛角尖的人来说，不争辩。</p><p><img src="../assets/20220724/01.png" alt></p><p><img src="../assets/20220724/02.png" alt></p><h2 id="HBuilder-插件版"><a href="#HBuilder-插件版" class="headerlink" title="HBuilder 插件版"></a>HBuilder 插件版</h2><p>用过在线版后已经爱不释手，某一天突然发现竟然有开发者工具插件版。其他的开发工具我没有尝试过，但是如果你平常也用<a href="https://dcloud.io/hbuilderx.html" target="_blank" rel="noopener">HBuilder X开发者工具</a>，那你一定要用插件版，因为实在是太方便了。不用你每次打开你收藏的web版本，只需要右键你需要压缩的图片，点击TinyPNG无损压缩即可，快速，方便，高效。同时他还支持文件夹压缩，选中文件夹，直接对文件夹内的所有图片进行压缩，是不是超级方便。</p><p><img src="../assets/20220724/03.png" alt></p><p><img src="../assets/20220724/04.png" alt></p><p>当然，使用HBuilder X开发工具插件版，需要你到<a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG官网</a>，申请一个开发者API，流程是：<strong><em>官网首页-DEVELOPER API - 填写邮箱申请api</em></strong>，点击Get your API key 后，邮箱就会收到一串key值，然后需要这串key在HBuilderX的后台配置一下即可使用，简洁方便快速。不过对于插件版，唯一的一个缺点就是每个月只有500张图片的限制，但是对于你日常开发应该已经完全足够了吧。而且是免费的，每月500张，已经非常非常人性化了。</p><p><img src="../assets/20220724/05.png" alt></p><p><img src="../assets/20220724/06.png" alt></p><p><img src="../assets/20220724/07.png" alt></p><p>申请key的全过程中只需要填入一个邮箱号即可，主要是为了给你发送一个唯一的key值，当然，如果你害怕邮箱侵犯了你的隐私，完全可以用web网页版的，而且没有数量的限制。</p><p>另外官方客户端代码库支持<a href="https://tinify.cn/developers/reference/ruby" target="_blank" rel="noopener">Ruby</a>, <a href="https://tinify.cn/developers/reference/php" target="_blank" rel="noopener">PHP</a>, <a href="https://tinify.cn/developers/reference/nodejs" target="_blank" rel="noopener">Node.js</a>, <a href="https://tinify.cn/developers/reference/python" target="_blank" rel="noopener">Python</a>, <a href="https://tinify.cn/developers/reference/java" target="_blank" rel="noopener">Java</a> 和 <a href="https://tinify.cn/developers/reference/dotnet" target="_blank" rel="noopener">.NET</a>。 也可以使用<a href="https://wordpress.org/plugins/tiny-compress-images/" target="_blank" rel="noopener">WordPress插件</a>来压缩JPEG和PNG图片。</p><p>不用不知道，用过后，你会来感谢我的，当然也不用感谢我，多感谢TinyPNG的开发商吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一款相见恨晚的图片智能压缩工具&lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyPNG&lt;/a&gt;，之所以安利这款图片压缩工具，是因为实在太好用了，用过后已爱不释手。他不仅有在线版，更有HBuilder插件版，不仅对开发者很友好，对广大群众同样很友好。而且它还具备以下优秀的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;免注册，免登录，完全免费，切不限制压缩数量（插件版有每月500张的限制）&lt;/li&gt;
&lt;li&gt;高压缩率（一般都是70%的压缩率）。&lt;/li&gt;
&lt;li&gt;使用智能压缩，不损失画质和观感。&lt;/li&gt;
&lt;li&gt;全面支持WEBP、jpeg和png格式。&lt;/li&gt;
&lt;li&gt;一次支持多张图片压缩，切插件版支持文件夹压缩。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;web在线版&quot;&gt;&lt;a href=&quot;#web在线版&quot; class=&quot;headerlink&quot; title=&quot;web在线版&quot;&gt;&lt;/a&gt;web在线版&lt;/h2&gt;&lt;p&gt;web在线版有两个版本，英文版&lt;a href=&quot;TinyPNG&quot;&gt;TinyPNG&lt;/a&gt;和中文版&lt;a href=&quot;https://tinify.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyPNG&lt;/a&gt;，其实没什么区别，无非就是中英文互译而已，不影响使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://mengnn.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="图片压缩" scheme="https://mengnn.cn/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="智能" scheme="https://mengnn.cn/tags/%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
</feed>
